<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ctf on Forest Hex</title>
    <link>/tags/ctf/</link>
    <description>Recent content in ctf on Forest Hex</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Forest Hex 2019</copyright>
    <lastBuildDate>Wed, 04 Sep 2019 02:30:14 +0000</lastBuildDate>
    
	<atom:link href="/tags/ctf/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Buffer Overflow on ARM #2</title>
      <link>/posts/buffer-overflow-on-arm-controlling-the-return-address/</link>
      <pubDate>Wed, 04 Sep 2019 02:30:14 +0000</pubDate>
      
      <guid>/posts/buffer-overflow-on-arm-controlling-the-return-address/</guid>
      <description>Hello again faithful readers! Today we are going to explore another buffer overflow on an ARM binary. The previous challenge involved overwriting a variable. This one is going to overflow the return address instead.
What&amp;rsquo;s the return address? The return address is a value stored on the stack whenever a function is called. After the function finishes, the CPU will load the value of the return address and attempt to execute the data there.</description>
    </item>
    
    <item>
      <title>ARM CTF - Sending Bytes</title>
      <link>/posts/buffer-overflow-on-arm-part-2/</link>
      <pubDate>Mon, 02 Sep 2019 23:34:59 +0000</pubDate>
      
      <guid>/posts/buffer-overflow-on-arm-part-2/</guid>
      <description>Why hello there faithful reader! It&amp;rsquo;s time again for another hacking related post.
Today we&amp;rsquo;ll be continuing on from our last post where we executed a buffer overflow to overwrite a secret number to reveal a flag.
So, a quick recap:
 We have a buffer overflow for a service which accepts our input. We can send it anything we want, if we have some way to represent non-printable characters.</description>
    </item>
    
    <item>
      <title>Buffer Overflow on ARM #1</title>
      <link>/posts/buffer-overflow-on-arm/</link>
      <pubDate>Fri, 30 Aug 2019 20:27:30 +0000</pubDate>
      
      <guid>/posts/buffer-overflow-on-arm/</guid>
      <description>Hello again faithful readers! Today&amp;rsquo;s post is about exploiting a buffer overflow.
A few days ago I was invited to attempt some binary exploitation challenges for ARM architecture. Of course I agreed, despite the fact that I have no experience debugging ARM binaries. That&amp;rsquo;s okay though, it&amp;rsquo;s how you learn.
I was happy to see the source code provided, and even happier when I was able to quickly identify the path to success without needing a debugger at all.</description>
    </item>
    
  </channel>
</rss>