<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Binary Exploitation on Forest Hex</title>
    <link>https://foresthex/categories/binary-exploitation/</link>
    <description>Recent content in Binary Exploitation on Forest Hex</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 04 Sep 2019 02:30:14 +0000</lastBuildDate>
    
	<atom:link href="https://foresthex/categories/binary-exploitation/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Buffer Overflow on ARM #2</title>
      <link>https://foresthex/posts/buffer-overflow-on-arm-#2/</link>
      <pubDate>Wed, 04 Sep 2019 02:30:14 +0000</pubDate>
      
      <guid>https://foresthex/posts/buffer-overflow-on-arm-#2/</guid>
      <description>Hello again faithful readers! Today we are going to explore another buffer overflow on an ARM binary. The previous challenge involved overwriting a variable. This one is going to overflow the return address instead.
What&amp;rsquo;s the return address? The return address is a value stored on the stack whenever a function is called. After the function finishes, the CPU will load the value of the return address and attempt to execute the data there.</description>
    </item>
    
  </channel>
</rss>