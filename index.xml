<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Forest Hex</title>
    <link>https://foresthex/</link>
    <description>Recent content on Forest Hex</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 04 Jan 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://foresthex/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hack The Box - Craft</title>
      <link>https://foresthex/posts/hack-the-box-craft/</link>
      <pubDate>Sat, 04 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://foresthex/posts/hack-the-box-craft/</guid>
      <description>Welcome to another Forest Hex hacking adventure! üå≤üèπ Today I&amp;rsquo;m going to exploit some poor programming decisions and leverage those into a root shell. Grab a beer and come along for the ride.
Feel free to jump around:
 Port Scan Exploring the Web Server Exploring Git Exploiting Python for a Reverse Shell Pivoting for More Access Gaining Root Access  Port Scan As always, I start with a port scan to see what&amp;rsquo;s open.</description>
    </item>
    
    <item>
      <title>Hack The Box - Beep</title>
      <link>https://foresthex/posts/hack-the-box-beep/</link>
      <pubDate>Sun, 13 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://foresthex/posts/hack-the-box-beep/</guid>
      <description>Welcome to another Forest Hex hacking adventure! üå≤üèπ Today&amp;rsquo;s plan is to explore a retired CTF from http://hackthebox.eu named &amp;ldquo;Beep&amp;rdquo;. I chose this box because it&amp;rsquo;s easy, it&amp;rsquo;s linux, and it&amp;rsquo;s rated very highly. All that put together should add up to some serious fun, so let&amp;rsquo;s get started:
   Port Scan Poking around the mySql Server Checking out Webmin Hylafax, what are you hiding? Back to Elastix Getting User and Root  Port Scan The first thing, as always, is a port scan:</description>
    </item>
    
    <item>
      <title>Buffer Overflow on ARM #2</title>
      <link>https://foresthex/posts/buffer-overflow-on-arm-#2/</link>
      <pubDate>Wed, 04 Sep 2019 02:30:14 +0000</pubDate>
      
      <guid>https://foresthex/posts/buffer-overflow-on-arm-#2/</guid>
      <description>Hello again faithful readers! Today we are going to explore another buffer overflow on an ARM binary. The previous challenge involved overwriting a variable. This one is going to overflow the return address instead.
What&amp;rsquo;s the return address? The return address is a value stored on the stack whenever a function is called. After the function finishes, the CPU will load the value of the return address and attempt to execute the data there.</description>
    </item>
    
    <item>
      <title>ARM CTF - Sending Bytes</title>
      <link>https://foresthex/posts/arm-ctf-sending-bytes/</link>
      <pubDate>Mon, 02 Sep 2019 23:34:59 +0000</pubDate>
      
      <guid>https://foresthex/posts/arm-ctf-sending-bytes/</guid>
      <description>Why hello there faithful reader! It&amp;rsquo;s time again for another hacking related post.
Today we&amp;rsquo;ll be continuing on from our last post where we executed a buffer overflow to overwrite a secret number to reveal a flag.
So, a quick recap:
 We have a buffer overflow for a service which accepts our input. We can send it anything we want, if we have some way to represent non-printable characters.</description>
    </item>
    
    <item>
      <title>Buffer Overflow on ARM #1</title>
      <link>https://foresthex/posts/buffer-overflow-on-arm-#1/</link>
      <pubDate>Fri, 30 Aug 2019 20:27:30 +0000</pubDate>
      
      <guid>https://foresthex/posts/buffer-overflow-on-arm-#1/</guid>
      <description>Hello again faithful readers! Today&amp;rsquo;s post is about exploiting a buffer overflow.
A few days ago I was invited to attempt some binary exploitation challenges for ARM architecture. Of course I agreed, despite the fact that I have no experience debugging ARM binaries. That&amp;rsquo;s okay though, it&amp;rsquo;s how you learn.
I was happy to see the source code provided, and even happier when I was able to quickly identify the path to success without needing a debugger at all.</description>
    </item>
    
    <item>
      <title>About this blog:</title>
      <link>https://foresthex/about/</link>
      <pubDate>Tue, 11 Jun 2019 18:51:11 +0000</pubDate>
      
      <guid>https://foresthex/about/</guid>
      <description>I created this page to follow my journey through the world of hacking. The term &amp;ldquo;hacking&amp;rdquo; is very broad, so to be more specific this blog will focus on hacking software.
That&amp;rsquo;s still a pretty large field, so let&amp;rsquo;s break it down a bit:
 Binary Exploitation Web App Exploitation Cryptography Cracking  My main method for learning will be participating in CTF challenges.
CTF (Capture the Flag) challenges are systems that are set up with the purpose of being exploited.</description>
    </item>
    
  </channel>
</rss>